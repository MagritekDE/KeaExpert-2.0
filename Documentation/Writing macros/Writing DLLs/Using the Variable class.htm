<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title> Using the Variable Class</title>
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 56.65pt 72.0pt 90.0pt;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-GB link=blue vlink=purple>

<div class=Section1>

<p class=MsoNormal style='background:#FF6600'><b><span lang=EN-NZ
style='font-size:20.0pt'>Using the Variable Class</span></b></p>

<p class=MsoNormal><b><span lang=EN-NZ>&nbsp;</span></b></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-NZ>In this appendix
there is information about the variable classes you have access to in the
Prospa DLLs.</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-NZ>The type of
variables which may be stored are indicated below. This is the information
obtained from the </span><span lang=EN-NZ style='font-size:10.0pt;font-family:
"Courier New"'>VarType(var)</span><span lang=EN-NZ>macro:</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>string ................... UNQUOTED_STRING</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>4 byte integer ........... INTEGER </span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>4 byte float ............. FLOAT</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>8 byte complex ........... COMPLEX</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>2D float matrix .......... MATRIX2D</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>2D complex matrix ........ CMATRIX2D</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>3D float matrix .......... MATRIX3D</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>3D complex matrix ........ CMATRIX3D</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>Note that complex numbers are stored in the
complex data type:</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>typedef struct</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>{</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;&nbsp; float r;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;&nbsp; float i;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>}complex;</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>Member functions for defining variables are
accessed using the syntax:</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>variablePointer-&gt;memberFunction(arguments)</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>or</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>variable.memberFunction(arguments)</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>The declarations for the available member
functions are given below (all return void):</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>MakeAndSetInteger(long number);&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>MakeAndSetFloat(float number);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>MakeAndSetComplex(complex number);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>MakeAndSetString(char* text);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>MakeAndLoadMatrix2D(float** array,long xsize,long ysize);
MakeAndLoadCMatrix2D(complex** array,long xsize,long ysize); </span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>MakeAndLoadMatrix3D(float*** array,long xsize,long ysize,long
zsize); MakeAndLoadCMatrix3D(complex*** array,long xsize,long ysize,long
zsize);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>Note the ordering of the matrix dimensions
is (xsize,ysize) not (rows,columns).</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>Memory for matricies can be allocated and
deleted using the following function calls:</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>float**&nbsp;&nbsp;&nbsp; MakeMatrix2D(long sizeX,long sizeY);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeMatrix2D(float **m,
long sizeX, long sizeY);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>float***&nbsp;&nbsp; MakeMatrix3D(long sizeX, long sizeY, long
sizeZ);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>void&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;FreeMatrix2D(float
***m, long sizeX, long sizeY, long sizeZ);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>complex**&nbsp; MakeCMatrix2D(long sizeX, long sizeY);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeCMatrix2D(complex
**m, long sizeX, long sizeY);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>complex*** MakeCMatrix3D(long sizeX, long sizeY, long sizeZ);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>void&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FreeCMatrix3D(complex
***m, long sizeX, long sizeY,long sizeZ);</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-NZ>To define a 1D
matrix or vector you would simply set the number of y dimension to 1 e.g. a
1024 by 1 vector v1 could be defined by ...</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>float **v1 = MakeMatrix2D(1024,1);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>To access the 50th element you would enter</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>data
= v1[0][49];</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-NZ>Note that the
index ordering is reversed, y first and then x. Also the indexing is zero based
according to C convention.</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>To assign this to a variable <i>var</i>
enter:</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New";
color:#333399'>var.MakeAndLoadMatrix2D(v1,1024,1);</span></p>

<p class=MsoNormal><span lang=EN-NZ style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

</div>

</body>

</html>
