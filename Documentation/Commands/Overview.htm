<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>A note on syntax</title>

<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0cm;
	margin-left:0cm;
	font-size:18.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-GB link=blue vlink=purple>

<div class=Section1>

<div style='border:solid #FF6600 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#FF6600'>

<p class=MsoNormal style='background:#FF6600;border:none;padding:0cm'><b><span
lang=EN-AU style='font-size:20.0pt'>Command Help - Introduction</span></b></p>

</div>

<p class=MsoNormal><b><span lang=EN-AU>&nbsp;</span></b></p>

<p class=MsoNormal><b><span lang=EN-AU>&nbsp;</span></b></p>

<p class=MsoNormal><span lang=EN-AU style='font-size:14.0pt'>Prospa Syntax</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>All Prospa
commands take the form:</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>command_name(
arg1, arg2, ...)  </span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>or </span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>a = 
command_name( arg1, arg2, ...)  </span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>or</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>(a,b,c ...) = 
command_name( arg1, arg2, ...)</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>The brackets for
the command_name arguments are optional but make it easier to read. Their use
is recommended in files. Spaces are ignored (except in the command name which
should have none). All arguments are separated by commas. The type of arguments
allowed may be determined by typing the command name without any arguments. The
result is a list of the expected arguments and their type. e.g.</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>&gt; zerofill</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>   arguments:
variable,fill,mode (cee:sls)</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>The first set of
symbols (cee) refer to the kind of argument. Each character refers to one
argument. The syntax is:</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>c ... constant
(not an expression)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>e ... an
expression (including variables, constants and operators)</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>The second set
of symbols (sls) refers to the type of argument expected after evaluation:</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>s ... string</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>f ... float</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>d ... short
integer</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>l ... long
integer</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>c ... complex
number</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>m ... matrix</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>cm .. complex
matrix</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>v ... variable</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>A string must be
surrounded by quotes if it part of an expression e.g. &quot;quoted
string&quot;.</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>So in the above
example there are 3 required arguments: the variable to be worked on (a 1D
matrix represented by an unquoted string i.e. a variable name), the number of
data points to fill to (may be an expression but should result in an integer),
and the zerofill mode which should be an expression resulting in a string.
Possible valid calls would be:</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>v = [0:1:99]</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>zerofill(v1,512*2,
&quot;end&quot;)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>or</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>v = [0:1:99]</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>a = 1023;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>b =
&quot;end&quot;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>zerofill(v1,a,b)</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>Note that</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>zerofill(2*v1,a,b)</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>would be invalid
because the first argument is now an expression.</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>In this
documentation you will also see the following abbreviations – they are also
used in the on-line syntax help which appears in the status line of the text-editor
and command-line-interface if you click on a command with the mouse.</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>INT ...... long
integer (32 bits)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>FLOAT .... single
precision float (32 bits)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>CPLX .....
complex number</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>VEC ...... 1D
matrix (vector)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>MAT ...... 1D or
2D matrix</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>MAT3D .... 3D matrix</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>CMAT .....
complex 1D or 2D matrix</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>CMAT3D ...
complex 3D matrix</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>RGB ...... 1 by 3
red-green-blue vector</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>STR ...... string</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>LIST ..... list
of strings</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>PLIST .... list
of parameter assignments</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-align:justify'><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>VARIANT ..
variable data type</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU style='font-size:14.0pt'>Extracting current
arguments</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>It is possible to extract the current
parameters from a command by passing the single argument string
&quot;getargs&quot; to the function. e.g.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>(varName,zeroLength,mode) =
zerofill(&quot;getargs&quot;)</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='text-align:justify'><span lang=EN-AU>This removes the
need for additional functions to extract these parameters (e.g. getzerofillpar)
or the need to define additional variables to store this information.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU style='font-size:14.0pt'>Procedures</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>Prospa supports the use of procedures.
Procedures are written in files and start with the command <i>procedure</i> and
end with the command <i>endproc.</i> The arguments to the <i>procedure</i>
command are the procedure name (unquoted) and any arguments to the procedure.
e.g.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>procedure(add,a,b)</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>   c = a + b</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>endproc(c)</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>If this procedure were stored inside a file
called <i>maths</i> then you would call this function as:</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>c = maths:add(2,3)</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>pr c</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>   c = 5</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>If the procedure name is not included then
the first procedure in the file will be executed.    </span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>c = maths(2,4)</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>pr c</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>   c = 6</span><span
lang=EN-AU> </span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>However because this can be somewhat
ambiguous, this is not recommended if there are multiple procedures in the
file.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><a name="about_lists"></a><span lang=EN-AU style='font-size:
14.0pt'>About Lists</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>A list is an array of strings e.g.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>my_list =
[&quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;]</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>entries in the list may be get or set using
standard array syntax:</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>element_1 = my_list[1]</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>my_list[2] = &quot;A new
value&quot;</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>The number of elements in a list can be
determined using the size command</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>number_of_elements =
size(my_list)</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>elements in a list may be evaluated in the
usual way</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>my_list[2] = &quot;2*3&quot;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>v = eval(my_list[2])</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>v</span><span
lang=EN-AU> now has the value 6.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>Para</span><span lang=EN-AU>meter lists are
a special kind of list which consists of a number of assignments in string form
e.g.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>par_list = [&quot;v1 =
10&quot;, &quot;v2 = 20&quot;, &quot;v3 = 30&quot;]</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>Typically this kind of list is used to
store parameters which will appear in window textboxes. This is done by giving
each textbox (or other control) a name:</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>setpar(n,3,
&quot;name&quot;, &quot;v1&quot;)</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>This associates the name </span><span
lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>v1</span><span
lang=EN-AU> with control 3 in window n.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>The command </span><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>getctrlvalues</span><span
lang=EN-AU> will extract from gui  window the names from all the controls and
generate a parameter list which assigns to each of these names the value of
that control (i.e. the value you have entered into that control).  This command
can then be followed by </span><span lang=EN-AU style='font-size:10.0pt;
font-family:"Courier New"'>assignlist</span><span lang=EN-AU> to convert each
of these parameter entries into a variable assignment. </span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>The macro can proceed to modify these
values and then finally you can call </span><span lang=EN-AU style='font-size:
10.0pt;font-family:"Courier New"'>mkparlist</span><span lang=EN-AU>() to
convert these variable assignments back into a parameter list from which you
can call </span><span lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>setctrlvalues</span><span
lang=EN-AU> which takes the parameter list and uses it to populate the controls
in window </span><span lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>n</span><span
lang=EN-AU>. By combining these with the </span><span lang=EN-AU
style='font-size:10.0pt;font-family:"Courier New"'>save</span><span lang=EN-AU>
command it is straightforward to save the current state of a window to a file
when it is exited and then initialise it to the same state at a later time
using the </span><span lang=EN-AU style='font-size:10.0pt;font-family:"Courier New"'>load</span><span
lang=EN-AU> command.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-AU>To summarize the order of commands is as
follows:</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>lst = </span><span
style='font-size:10.0pt;font-family:"Courier New";color:green'>getctrlvalues</span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>(n)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:green'>assignlist</span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>(lst)</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>...</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:#AA0000'># Modify
assigned variables</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>...</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-autospace:none'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>lst = </span><span
style='font-size:10.0pt;font-family:"Courier New";color:green'>mkparlist</span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>()</span></p>

<p class=MsoNormal style='margin-left:14.2pt'><span style='font-size:10.0pt;
font-family:"Courier New";color:green'>setctrlvalues</span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>(n,lst)</span> </p>

<span lang=EN-AU style='font-size:12.0pt;font-family:"Times New Roman"'><br
clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal><span lang=EN-AU>A number of additional commands are <a
href="#lists">available </a>for manipulating parameter lists.</span></p>

<p class=MsoNormal><span lang=EN-AU>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-NZ>&nbsp;</span></p>

</div>

</body>

</html>
