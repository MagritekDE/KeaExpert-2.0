<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"\@MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.55pt;
	margin-bottom:.0001pt;
	text-indent:-42.55pt;
	page-break-after:avoid;
	font-size:18.0pt;
	font-family:"Calibri","sans-serif";
	color:#4F81BD;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.55pt;
	margin-bottom:.0001pt;
	text-indent:-42.55pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Calibri","sans-serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:56.8pt;
	margin-bottom:.0001pt;
	text-indent:-42.55pt;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:42.55pt;
	margin-bottom:.0001pt;
	text-indent:-42.55pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Times New Roman","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Times New Roman","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=EN-NZ>

<div class=WordSection1>

<p class=MsoNormal style='background:#FF6600'> <b><span style='font-size:20.0pt'>About
Lists</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A list is an array of strings e.g.</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>my_list = [&quot;value1&quot;, &quot;value2&quot;,
&quot;value3&quot;]</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>entries in the list may be get or set using standard array
syntax:</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>element_1 = my_list[1]</p>

<p class=MsoNormal>my_list[2] = &quot;A new value&quot;</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>The number of elements in a list can be determined using the
size command</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>number_of_elements = size(my_list)</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>elements in a list may be numerically evaluated in the usual
way</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>my_list[2] = &quot;2*3&quot;</p>

<p class=MsoNormal>v = eval(my_list[2])</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>v now has the value 6.</p>

<p class=MsoNormal><i> </i></p>

<p class=MsoNormal><i>Parameter lists </i>are a special kind of list which consists
of a number of assignments in string form e.g.</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>par_list = [&quot;v1 = 10&quot;, &quot;v2 = 20&quot;,
&quot;v3 = 30&quot;]</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>each entry is made up of a parameter name and value. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>parameter_name = parameter_value</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The parameter_name must be a valid string while value can be
a string, number or vector.</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>Typically this kind of list is used to store parameters
which will appear in window text-boxes and other controls. This is done by
giving each control a name:</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>setpar(n,3, &quot;name&quot;, &quot;v1&quot;)</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>This associates the name v1 with control 3 in window n.</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>The command <b>getctrlvalues</b>() will extract from gui 
window the names from all the controls and generate a parameter list which
assigns to each of these names the value of that control (i.e. the value you
have entered into that control).  This command can then be followed by <b>assignlist</b>()
to convert each of these parameter entries into a variable assignment. </p>

<p class=MsoNormal> </p>

<p class=MsoNormal>The macro can proceed to modify these values and then
finally you can call <b>mkparlist</b>() to convert these variable assignments
back into a parameter list from which you can call <b>setctrlvalues</b>() which
takes the parameter list and uses it to populate the controls in window n. By
combining these with the <b>save</b>() command it is straightforward to save
the current state of a window to a file when it is exited and then initialise
it to the same state at a later time using the <b>load</b>() command.</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>To summarize the order of commands is as follows:</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>lst = getctrlvalues(n)</p>

<p class=MsoNormal>assignlist(lst)</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>...</p>

<p class=MsoNormal># Modify assigned variables</p>

<p class=MsoNormal>...</p>

<p class=MsoNormal> </p>

<p class=MsoNormal>lst = mkparlist()</p>

<p class=MsoNormal>setctrlvalues(n,lst) </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A number of additional commands are available for
manipulating parameter lists.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>addprefix</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>These commands adds a prefix to all the parameter components
in a parameter list. This is useful way of grouping some of the controls in a
complex interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>getlistindex</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This searches through a list looking for the entry which
matches the passed parameter name.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>getlistvalue</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Given a valid parameter name this command returns the
corresponding parameter value (as a string).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>getsublist</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This extracts a subset of a list by passing the parameter
names or a parameter prefix for those parameters to be extracted</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>insertinlist</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This inserts a new string into a list. (It doesn’t have to
be a parameter string).</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>ispar</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Searches to see if a parameter with the specified name is
present in the list</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>list</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Generates a list with the specified number of entries. It is
possible to make a null list by passing 0 as the argument. This is useful if
you want to dynamically build up a list.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>mergelists</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This combines two parameter lists keeping all the entries in
one list and adding unique entries from the other list.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>renamelistentry</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This changes the parameter name for a list entry</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>rmfromlist</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This removes an entry from a list given the parameter name
or index.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>rmprefix</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This is the reverse of addprefix. It removes the prefix from
a parameter list and can be used to extract a subset of controls from a larger
group.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>lst = getctrlvalues(n)</p>

<p class=MsoNormal>lst = getsublist(“left_”)</p>

<p class=MsoNormal>lst = rmprefix(“left_”)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>lst now contains all the parameters which had names starting
with “left_”.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>setlistvalue</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This sets the parameter value for an entry in the list given
the parameter name.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>sortlist</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This sorts the entries in a list in alphabetical order based
on the parameter names.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>splitpar</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This takes a parameter entry stored in a string and returns
the parameter name and the parameter value as strings.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
