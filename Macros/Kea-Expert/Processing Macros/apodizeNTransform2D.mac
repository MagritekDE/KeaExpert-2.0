####################################################
#
# Apply a forward or reverse 2D Fourier transform
# to the current 2D plot data.
#
# Note plot data must have power of 2 dimensions.
#
# Author: C Eccles
#
# Copyright (c) Magritek 2016-2020
#
#####################################################

procedure(ApodizeNTransform2D, inPlt, outPlt)

# Allow editing
   if(EditIfShiftPressed(getmacropath(),getmacroname()))
      return
   endif

   parentNr = guiwinnr()
   fidPlt = gPlot->getPlotObject(inPlt)
   freqPlt = gPlot->getPlotObject(outPlt)
   n = :windowdefinition()
   assignctrls(n)
   windowvar(wv_mIn,wv_rowFt,wv_mOut,wv_parent,
             wvFidPlt,wvFreqPlt)
   wvFidPlt = fidPlt
   wvFreqPlt = freqPlt
   wv_parent = parentNr
   :loadPar()
   :setCtrlVisibility()
   cd("$appdir$\\Macros\\1D_Macros")
   cachemacro("filters.mac")
   cacheproc("true")
   setwindowpar(n,"statusbox",8)
   showwindow(n)
   w_winNr = n
   print("\n !!!This macro is deprecated. Please update to 2DPostProcessing!!!\n")

endproc()

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("Process 2D FID", -1, -1, 724, 422)

      # Define all controls with basic parameters
      getmessage(0,:processMessage())
      groupbox(1, "Processing Parameters", 10, 8, "ww-91", "wh-44")
      tab(2, 29, 33, "ww-124", "wh-81",:setCtrlVisibility())
      button(3, "ww-70", 30, 63, 31, "Transform",
         :process2D("forward");)
      button(4, "ww-70", 82, 63, 31, "Filters",
         n = filters();)
      button(5, "ww-70", 134, 63, 31, "Reset",
         :update_controls();)
      button(6, "ww-70", 186, 63, 31, "Help",
         :show_help();)
      button(7, "ww-70", 238, 63, 31, "Close",
         :savePar();
         closewindow(0);)
      statusbox(8)
      statictext(9, 80, 193, "right", "Invert")
      checkbox(10, 85, 194, "no,yes", "no")
      statictext(11, 80, 193, "right", "Invert")
      checkbox(12, 85, 194, "no,yes", "no")
      statictext(100, 118, 83, "center", "Fourier transform")
      statictext(101, 80, 108, "right", "Origin")
      textmenu(102, 85, 104, 71, 200)
      statictext(103, 80, 138, "right", "Type")
      textmenu(104, 85, 134, 71, 200)
      statictext(105, 80, 168, "right", "Zero-fill")
      textmenu(106, 85, 164, 57, 200)
      statictext(107, 149, 168, "center", "\215")
      divider(108, 179, 70, 3, 157, "vertical")
      statictext(109, 304, 83, "center", "Phasing")
      statictext(110, 238, 108, "right", "Method")
      textmenu(111, 245, 104, 150, 200,:choosef2PhaseMethod();)
      statictext(112, 238, 137, "right", "p0 phase")
      textbox(113, 245, 134, 41)
      statictext(114, 290, 137, "left", "deg")
      statictext(115, 238, 167, "right", "p1 phase")
      textbox(116, 245, 164, 41)
      statictext(117, 290, 167, "left", "deg")
      statictext(118, 348, 146, "center", "Fixed p1")
      textbox(119, 323, 164, 51)
      statictext(120, 377, 167, "left", "deg")
      statictext(121, 238, 198, "right", "p1 pivot")
      textbox(122, 245, 194, 51)
      statictext(123, 300, 198, "left", "ppm")
      divider(124, 408, 70, 3, 157, "vertical")
      statictext(125, 505, 83, "center", "Deconvolution")
      statictext(126, 470, 109, "right", "Method")
      textmenu(127, 475, 105, 100, 200)
      statictext(128, 534, 138, "right", "Select reference FID")
      button(129, 539, 135, 19, 19, "...",
         :selectReferenceFile();)
      statictext(130, 470, 168, "right", "Linewidth")
      textmenu(131, 475, 165, 47, 200)
      statictext(132, 527, 168, "left", "Hz")
      divider(133, 42, 231, 560, 5, "horizontal")
      statictext(134, 126, 247, "center", "Baseline correction")
      statictext(135, 89, 274, "right", "Method")
      textmenu(136, 94, 270, 100, 200)
      statictext(137, 110, 304, "right", "Nr. segments")
      textmenu(138, 115, 300, 57, 200)
      statictext(139, 110, 334, "right", "Noise factor")
      textmenu(140, 115, 330, 57, 200)
      statictext(141, 221, 303, "right", "Debug")
      checkbox(142, 200, 320, "no,yes", "no")
      divider(143, 239, 239, 3, 122, "vertical")
      statictext(144, 301, 247, "center", "PPM display")
      statictext(145, 302, 282, "right", "Apply")
      checkbox(146, 307, 283, "no,yes", "no")
      statictext(147, 302, 316, "right", "PPM offset")
      textbox(148, 307, 313, 47)
      divider(149, 368, 239, 3, 122, "vertical")
      statictext(150, 419, 276, "right", "Function")
      textmenu(151, 430, 271, 131, 200)
      statictext(152, 522, 247, "right", "Apodization")
      button(153, 570, 272, 19, 19, "...",
         filters();)
      textbox(154, 10, 10, 47)

      statictext(200, 118, 83, "center", "Fourier transform")
      statictext(201, 80, 108, "right", "Origin")
      textmenu(202, 85, 104, 71, 200)
      statictext(203, 80, 138, "right", "Type")
      textmenu(204, 85, 134, 71, 200)
      statictext(205, 80, 168, "right", "Zero-fill")
      textmenu(206, 85, 164, 57, 200)
      statictext(207, 149, 168, "center", "\215")
      divider(208, 179, 70, 3, 157, "vertical")
      statictext(209, 304, 83, "center", "Phasing")
      statictext(210, 238, 108, "right", "Method")
      textmenu(211, 245, 104, 150, 200, :choosef1PhaseMethod();)
      statictext(212, 238, 137, "right", "p0 phase")
      textbox(213, 245, 134, 41)
      statictext(214, 290, 137, "left", "deg")
      statictext(215, 238, 167, "right", "p1 phase")
      textbox(216, 245, 164, 41)
      statictext(217, 290, 167, "left", "deg")
      statictext(218, 238, 198, "right", "p1 pivot")
      textbox(219, 245, 194, 51)
      statictext(220, 300, 198, "left", "ppm")
      statictext(221, 348, 146, "center", "Fixed p1")
      textbox(222, 323, 164, 51)
      statictext(223, 377, 167, "left", "deg")
      divider(224, 408, 70, 3, 157, "vertical")
      statictext(225, 505, 83, "center", "Deconvolution")
      statictext(226, 470, 109, "right", "Method")
      textmenu(227, 475, 105, 100, 200)
      statictext(228, 534, 138, "right", "Select reference FID")
      button(229, 539, 135, 19, 19, "...",
         :selectReferenceFile();)
      statictext(230, 470, 168, "right", "Linewidth")
      textmenu(231, 475, 165, 47, 200)
      statictext(232, 527, 168, "left", "Hz")
      divider(233, 41, 231, 560, 5, "horizontal")
      statictext(234, 126, 247, "center", "Baseline correction")
      statictext(235, 89, 274, "right", "Method")
      textmenu(236, 94, 270, 100, 200)
      statictext(237, 110, 304, "right", "Nr. segments")
      textmenu(238, 115, 300, 57, 200)
      statictext(239, 110, 334, "right", "Noise factor")
      textmenu(240, 115, 330, 57, 200)
      statictext(241, 221, 303, "right", "Debug")
      checkbox(242, 200, 320, "no,yes", "no")
      divider(243, 239, 239, 3, 122, "vertical")
      statictext(244, 301, 247, "center", "PPM display")
      statictext(245, 302, 282, "right", "Apply")
      checkbox(246, 307, 283, "no,yes", "no")
      statictext(247, 302, 316, "right", "PPM offset")
      textbox(248, 307, 313, 47)
      divider(249, 368, 239, 3, 122, "vertical")
      statictext(250, 419, 276, "right", "Function")
      statictext(251, 522, 247, "right", "Apodization")
      textmenu(252, 430, 271, 131, 200)
      button(253, 570, 272, 19, 19, "...",
         filters();)

      checkbox(300, 80, 80, "no,yes", "no")
      statictext(301, 70, 80, "right", "tilt45")

     # Set other control parameters
      setpar(n,2,"tab_number",6,
                  "inittabs",["f2 axis","f1 axis","Other"])
      setpar(n,3,"tab_number",1)
      setpar(n,4,"tab_number",2)
      setpar(n,5,"tab_number",3)
      setpar(n,6,"tab_number",4)
      setpar(n,7,"tab_number",5)
      setpar(n,8,"objID","statusBoxCtrl")
      setpar(n,9,"tabparent",[2,0])
      setpar(n,10,"objID","f2FTInvertCtrl",
                  "valueID","f2FTInvert",
                  "tab_number",24,
                  "tabparent",[2,0])
      setpar(n,11,"tabparent",[2,1])
      setpar(n,12,"objID","f1FTInvertCtrl",
                  "valueID","f1FTInvert",
                  "tab_number",24,
                  "tabparent",[2,1])
      setpar(n,100,"fgcolor",[0,128,0],
                  "tabparent",[2,0])
      setpar(n,101,"tabparent",[2,0])
      setpar(n,102,"objID","f2FTOriginCtrl",
                  "valueID","f2FTOrigin",
                  "tab_number",7,
                  "tabparent",[2,0],
                  "menu",["Start","Center"])
      setpar(n,103,"tabparent",[2,0])
      setpar(n,104,"objID","f2FTTypeCtrl",
                  "valueID","f2FTType",
                  "tab_number",8,
                  "tabparent",[2,0],
                  "menu",["None","Hypercomplex","Complex","Real"])
      setpar(n,105,"tabparent",[2,0])
      setpar(n,106,"objID","f2ZeroFillCtrl",
                  "valueID","f2ZeroFill",
                  "readonly","true",
                  "tab_number",9,
                  "tabparent",[2,0],
                  "type","integer",
                  "menu",["1","2","4","8","16"])
      setpar(n,107,"tab_number",10,
                  "tabparent",[2,0])
      setpar(n,108,"tabparent",[2,0])
      setpar(n,109,"fgcolor",[0,128,0],
                  "tabparent",[2,0])
      setpar(n,110,"tabparent",[2,0])
      setpar(n,111,"objID","f2PhaseMethodCtrl",
                  "valueID","f2PhaseMethod",
                  "tab_number",11,
                  "tabparent",[2,0],
                  "menu",["None","Fixed"])
      setpar(n,112,"tabparent",[2,0])
      setpar(n,113,"objID","f2P0PhaseCtrl",
                  "valueID","f2P0Phase",
                  "tab_number",12,
                  "tabparent",[2,0])
      setpar(n,114,"tabparent",[2,0])
      setpar(n,115,"tabparent",[2,0])
      setpar(n,116,"objID","f2P1PhaseCtrl",
                  "valueID","f2P1Phase",
                  "tab_number",13,
                  "tabparent",[2,0])
      setpar(n,117,"tabparent",[2,0])
      setpar(n,118,"tabparent",[2,0])
      setpar(n,119,"objID","f2P1PhaseFixedCtrl",
                  "valueID","f2P1FixedPhase",
                  "tab_number",15,
                  "tabparent",[2,0])
      setpar(n,120,"tabparent",[2,0])
      setpar(n,121,"tabparent",[2,0])
      setpar(n,122,"objID","f2P1PivotPPMCtrl",
                  "valueID","f2P1PivotPPM",
                  "tab_number",14,
                  "tabparent",[2,0])
      setpar(n,123,"tabparent",[2,0])
      setpar(n,124,"tabparent",[2,0])
      setpar(n,125,"fgcolor",[0,128,0],
                  "tabparent",[2,0])
      setpar(n,126,"tabparent",[2,0])
      setpar(n,127,"objID","f2RefDeconvMethodCtrl",
                  "valueID","f2RefDeconvMethod",
                  "tab_number",16,
                  "tabparent",[2,0],
                  "menu",["None","Reference fid"])
      setpar(n,128,"tabparent",[2,0])
      setpar(n,129,"tab_number",17,
                  "tabparent",[2,0])
      setpar(n,130,"tabparent",[2,0])
      setpar(n,131,"objID","f2RefDeconvLinewidthCtrl",
                  "valueID","f2RefDeconvLinewidth",
                  "tab_number",18,
                  "tabparent",[2,0],
                  "menu",["0.1","0.2","0.3","0.4","0.5","1.0","2.0","5.0"])
      setpar(n,132,"tab_number",19,
                  "tabparent",[2,0])
      setpar(n,133,"tabparent",[2,0])
      setpar(n,134,"fgcolor",[0,128,0],
                  "tabparent",[2,0])
      setpar(n,135,"tabparent",[2,0])
      setpar(n,136,"objID","f2BaseLineCorrectionCtrl",
                  "valueID","f2BaseLineCorrectionMethod",
                  "tab_number",20,
                  "tabparent",[2,0],
                  "menu",["None","Offset"])
      setpar(n,137,"tabparent",[2,0])
      setpar(n,138,"objID","f2BaseLineNrSegmentsCtrl",
                  "valueID","f2BaseLineNrSegments",
                  "tab_number",21,
                  "tabparent",[2,0],
                  "menu",["16","32","64","128","256"])
      setpar(n,139,"tabparent",[2,0])
      setpar(n,140,"objID","f2BaseLineNoiseFactorCtrl",
                  "valueID","f2BaseLineNoiseFactor",
                  "tab_number",22,
                  "tabparent",[2,0],
                  "menu",["1","2","3","4","5","6","7","8","9","10"])
      setpar(n,141,"tabparent",[2,0])
      setpar(n,142,"objID","f2BLDebugCtrl",
                  "valueID","f2BLDebug",
                  "tab_number",23,
                  "tabparent",[2,0])
      setpar(n,143,"tabparent",[2,0])
      setpar(n,144,"fgcolor",[0,128,0],
                  "tabparent",[2,0])
      setpar(n,145,"tabparent",[2,0])
      setpar(n,146,"objID","f2PPMCtrl",
                  "valueID","f2DisplayInPPM",
                  "tab_number",24,
                  "tabparent",[2,0])
      setpar(n,147,"tabparent",[2,0])
      setpar(n,148,"objID","f2PPMOffsetCtrl",
                  "valueID","f2PPMOffset",
                  "tab_number",25,
                  "tabparent",[2,0])
      setpar(n,149,"tabparent",[2,0])
      setpar(n,150,"tabparent",[2,0])
      setpar(n,151,"objID","f2FilterCtrl",
                  "valueID","f2Filter",
                  "tab_number",26,
                  "tabparent",[2,0],
                  "menu",["none","exponential","cosinebell","cosinebellsquared","sinebell","sinebellsquared","gaussian","vee","shsinebellsquared","vee2","shgaussian"])
      setpar(n,152,"fgcolor",[0,128,0],
                  "tabparent",[2,0])
      setpar(n,153,"tab_number",27,
                  "tabparent",[2,0])
      setpar(n,154,"objID","refDeconvFileCtrl",
                  "valueID","refDeconvFile")

      setpar(n,200,"fgcolor",[0,128,0],
                  "tabparent",[2,1])
      setpar(n,201,"tabparent",[2,1])
      setpar(n,202,"objID","f1FTOriginCtrl",
                  "valueID","f1FTOrigin",
                  "tab_number",28,
                  "tabparent",[2,1],
                  "menu",["Start","Center"])
      setpar(n,203,"tabparent",[2,1])
      setpar(n,204,"objID","f1FTTypeCtrl",
                  "valueID","f1FTType",
                  "tab_number",29,
                  "tabparent",[2,1],
                  "menu",["None","Complex","Real"])
      setpar(n,205,"tabparent",[2,1])
      setpar(n,206,"objID","f1ZeroFillCtrl",
                  "valueID","f1ZeroFill",
                  "readonly","true",
                  "tab_number",30,
                  "tabparent",[2,1],
                  "menu",[1,2,4,8,16])
      setpar(n,207,"tab_number",31,
                  "tabparent",[2,1])
      setpar(n,208,"tabparent",[2,1])
      setpar(n,209,"fgcolor",[0,128,0],
                  "tabparent",[2,1])
      setpar(n,210,"tabparent",[2,1])
      setpar(n,211,"objID","f1PhaseMethodCtrl",
                  "valueID","f1PhaseMethod",
                  "tab_number",32,
                  "tabparent",[2,1],
                  "menu",["None","Fixed","Magnitude"])
      setpar(n,212,"tabparent",[2,1])
      setpar(n,213,"objID","f1P0PhaseCtrl",
                  "valueID","f1P0Phase",
                  "tab_number",33,
                  "tabparent",[2,1])
      setpar(n,214,"tabparent",[2,1])
      setpar(n,215,"tabparent",[2,1])
      setpar(n,216,"objID","f1P1PhaseCtrl",
                  "valueID","f1P1Phase",
                  "tab_number",34,
                  "tabparent",[2,1])
      setpar(n,217,"tabparent",[2,1])
      setpar(n,218,"tabparent",[2,1])
      setpar(n,219,"objID","f1P1PivotPPMCtrl",
                  "valueID","f1P1PivotPPM",
                  "tab_number",35,
                  "tabparent",[2,1])
      setpar(n,220,"tabparent",[2,1])
      setpar(n,221,"tabparent",[2,1])
      setpar(n,222,"objID","f1P1PhaseFixedCtrl",
                  "valueID","f1P1FixedPhase",
                  "tab_number",36,
                  "tabparent",[2,1])
      setpar(n,223,"tabparent",[2,1])
      setpar(n,224,"tabparent",[2,1])
      setpar(n,225,"fgcolor",[0,128,0],
                  "tabparent",[2,1])
      setpar(n,226,"tabparent",[2,1])
      setpar(n,227,"objID","f1RefDeconvMethodCtrl",
                  "valueID","f1RefDeconvMethod",
                  "tab_number",37,
                  "tabparent",[2,1],
                  "menu",["None"])
      setpar(n,228,"tabparent",[2,1])
      setpar(n,229,"tab_number",38,
                  "tabparent",[2,1])
      setpar(n,230,"tabparent",[2,1])
      setpar(n,231,"objID","f1RefDeconvLinewidthCtrl",
                  "valueID","f1RefDeconvLinewidth",
                  "tab_number",39,
                  "tabparent",[2,1],
                  "menu",["0.1","0.2","0.3","0.4","0.5"])
      setpar(n,232,"tab_number",40,
                  "tabparent",[2,1])
      setpar(n,233,"tabparent",[2,1])
      setpar(n,234,"fgcolor",[0,128,0],
                  "tabparent",[2,1])
      setpar(n,235,"tabparent",[2,1])
      setpar(n,236,"objID","f1BaseLineCorrectionCtrl",
                  "valueID","f1BaseLineCorrectionMethod",
                  "tab_number",41,
                  "tabparent",[2,1],
                  "menu",["None","Offset"])
      setpar(n,237,"tabparent",[2,1])
      setpar(n,238,"objID","f1BaseLineNrSegmentsCtrl",
                  "valueID","f1BaseLineNrSegments",
                  "tab_number",42,
                  "tabparent",[2,1],
                  "type","integer",
                  "menu",[1,2,4,8,16])
      setpar(n,239,"tabparent",[2,1])
      setpar(n,240,"objID","f1BaseLineNoiseFactorCtrl",
                  "valueID","f1BaseLineNoiseFactor",
                  "tab_number",43,
                  "tabparent",[2,1],
                  "menu",["1","2","3","4","5","6","7","8","9","10"])
      setpar(n,241,"tabparent",[2,1])
      setpar(n,242,"objID","f1BLDebugCtrl",
                  "valueID","f1BLDebug",
                  "tab_number",44,
                  "tabparent",[2,1])
      setpar(n,243,"tabparent",[2,1])
      setpar(n,244,"fgcolor",[0,128,0],
                  "tabparent",[2,1])
      setpar(n,245,"tabparent",[2,1])
      setpar(n,246,"objID","f1PPMCtrl",
                  "valueID","f1DisplayInPPM",
                  "tab_number",45,
                  "tabparent",[2,1])
      setpar(n,247,"tabparent",[2,1])
      setpar(n,248,"objID","f1PPMOffsetCtrl",
                  "valueID","f1PPMOffset",
                  "tab_number",46,
                  "tabparent",[2,1])
      setpar(n,249,"tabparent",[2,1])
      setpar(n,250,"tabparent",[2,1])
      setpar(n,251,"fgcolor",[0,128,0],
                  "tabparent",[2,1])
      setpar(n,252,"objID","f1FilterCtrl",
                  "valueID","f1Filter",
                  "tab_number",47,
                  "tabparent",[2,1],
                  "menu",["none","exponential","cosinebell","cosinebellsquared","sinebell","sinebellsquared","gaussian","vee","shsinebellsquared","vee2","shgaussian"])
      setpar(n,253,"tab_number",48,
                  "tabparent",[2,1])

      setpar(n,300,"objID","tilt45Ctrl",
                  "valueID","tilt45",
                  "tabparent",[2,2])
      setpar(n,301,"tabparent",[2,2])

     # Set other window parameters
endproc(n)

procedure(setCtrlVisibility)

# Reference deconvolution file
  setpar(0,154,"visible","false")

  :choosef2PhaseMethod()
  :choosef1PhaseMethod()

  setpar(0,128,"enable","true")
  setpar(0,129,"enable","true")
  setpar(0,130,"enable","true")
  setpar(0,131,"enable","true")
  setpar(0,132,"enable","true")

  setpar(0,137,"enable","false")
  setpar(0,138,"enable","false")
  setpar(0,139,"enable","false")
  setpar(0,140,"enable","false")
  setpar(0,141,"enable","false")
  setpar(0,142,"enable","false")


  setpar(0,237,"enable","false")
  setpar(0,238,"enable","false")
  setpar(0,239,"enable","false")
  setpar(0,240,"enable","false")
  setpar(0,241,"enable","false")
  setpar(0,242,"enable","false")

  setpar(0,228,"enable","false")
  setpar(0,229,"enable","false")
  setpar(0,230,"enable","false")
  setpar(0,231,"enable","false")
  setpar(0,232,"enable","false")

endproc()

####################################################
# Load old parameters
####################################################

procedure(loadPar)

   bak = getcwd()

   defaults =  ["f1Filter = \"sinebellsquared\"",
                "f2Filter = \"sinebellsquared\"",
                "f1FTType = \"Complex\"",
                "f2FTType = \"Complex\"",
                "f1FTInvert = \"yes\"",
                "f2FTInvert = \"no\"",
                "f1FTOrigin = \"Start\"",
                "f2FTOrigin = \"Start\"",
                "f1ZeroFill = 1",
                "f2ZeroFill = 1",
                "f1PPMOffset = 0",
                "f2PPMOffset = 0",
                "f1PhaseMethod = \"Magnitude\"",
                "f2PhaseMethod = \"None\"",
                "f1DisplayInPPM = \"yes\"",
                "f2DisplayInPPM = \"yes\"",
                "f1RefDeconvMethod = \"None\"",
                "f2RefDeconvMethod = \"None\"",
                "f1RefDeconvLinewidth = 0",
                "f2RefDeconvLinewidth = 0",
                "f1BaseLineCorrectionMethod = \"None\"",
                "f2BaseLineCorrectionMethod = \"None\"",
                "f1BaseLineNrSegments = 64",
                "f2BaseLineNrSegments = 64",
                "f1BaseLineNoiseFactor = 3",
                "f2BaseLineNoiseFactor = 3",
                "f1P0Phase = 0",
                "f1P1Phase = 0",
                "f1P1FixedPhase = 0",
                "f1P1Pivot = 0",
                "f1P1PivotPPM = 0",
                "f2P0Phase = 0",
                "f2P1Phase = 0",
                "f2P1FixedPhase = 0",
                "f2P1Pivot = 0",
                "f2P1PivotPPM = 0"]
 
   plt =  wvFidPlt
   path = plt->filepath

   found = 0
   if(isdir(path)) # Try using proc.par
      cd(path)
      if(isfile("proc_temp.par"))
         procPar = load("proc_temp.par")
         procPar = mergelists(procPar,defaults)
         found = 1
      elseif(isfile("proc.par"))
         procPar = load("proc.par")
         procPar = mergelists(procPar,defaults)
         found = 1
      endif
   endif

   if(found == 0) # Otherwise use global preferences
      cd(prefdir)
      mkdir("SpinsolveParameters\\Preferences")
      cd("SpinsolveParameters\\Preferences")
      file = "ucsPreferences.par" 
      procPar = defaults
      if(isfile(file))
         proc = load(file)
         proc = :getPPMOffsets(proc)
         procPar = setlistvalues(procPar,proc)
      endif
   endif

   setctrlvalues(0,procPar)
   cd(bak)

endproc(procPar)

procedure(getPPMOffsets, proc)

   assignlist(getctrlvalues(wv_parent),"list","list",["nucleus"])
   try
      (nucx,nucy) = scanstr(nucleus,"%1-%2")
   catch
      pr lasterror()
      abort("Incorrect nuclei parameter")
   endtry
   f2Offset = getlistvalue(proc,"ppmOffset$nucx$")
   f1Offset = getlistvalue(proc,"ppmOffset$nucy$")
   proc = setlistvalue(proc,"f2PPMOffset","$f2Offset$")
   proc = setlistvalue(proc,"f1PPMOffset","$f1Offset$")

endproc(proc)


####################################################
# Save current parameters
####################################################

procedure(savePar)

   bak = getcwd()
# Save to default location
   cd(prefdir)
   mkdir("SpinsolveParameters")
   cd("SpinsolveParameters")
   par = getctrlvalues(0)
  # save("ApodizeNTransform2D.par",sortlist(par))
# Save to data area in proc.par
   plt =  wvFidPlt

   try
      path = plt->filepath
   
      if(isdir(path))
         cd(path)
         guipar = getctrlvalues(0)
         if(isfile("proc.par"))
            procPar = load("proc.par")
            procPar = mergelists(guipar,procPar)
         elseif(isfile("proc_temp.par"))
            procPar = load("proc_temp.par")
            procPar = mergelists(guipar,procPar)
         else
            procPar = guipar
         endif
         save("proc_temp.par",sortlist(procPar))
      endif
   catch # If plot has been closed
   endtry

   cd(bak)

endproc()


####################################################
# Display help file
####################################################

procedure(show_help)

   help("2DMacros.htm","ft2d")

endproc()

########################################################
# Update all controls based on current 2D data set
########################################################

procedure(update_controls)

   m = wvFidPlt->getdata()
   if(m == null)
     message("Error","No 2D plot","error")
     return()
   endif

# Set output width and height strings
   (w,h) = size(m)
   setpar(0,18,"text",w)
   setpar(0,19,"text",h)

# Update the filter menu
   :update_filter_menu()

# Set FT type
   if(getpar(0,15,"index") == -1)
      setpar(0,15,"text","FTEcho")
      setpar(0,16,"text","FTEcho")
   endif
# Set WindowFunction type
   if(getpar(0,12,"index") == -1)
      setpar(0,12,"text","none")
      setpar(0,13,"text","none")
   endif

   if(wvFreqPlt->axes->xdirection() == "reversed")
      ppmCtrl->text("yes")
   else
      ppmCtrl->text("no")
   endif

endproc()


###################################################
# Process the 2D data
###################################################

procedure(process2D,dir)

  time(0)

# Check to see if a 2D data set is present
   (wv_mIn,xscale,yscale) = wvFidPlt->getdata()
   if(wv_mIn == null)
     message("Error","No 2D plot","error")
     return()
   endif

# Get the window parameters
   guipar = getctrlvalues(0)
   assignlist(guipar)

# Get input matrix size
   (f2Sz,f1Sz) = size(wv_mIn)

# Process wv_mIn -> wv_mOut
   statusBoxCtrl->text("Processing ...")

# f2 deconvolution
   :deconvolutionf2(linspace(xscale[0],xscale[1],f2Sz))

# f2 transform
   :transformf2(f2ZeroFill*f2Sz,f1ZeroFill*f1Sz,
                f2WindowFunction,
                f2FTOrigin,
                f2FTType,
                f2FTInvert,f2PhaseMethod,
                f2P0Phase,f2P1Phase,f2P1PivotPPM)

# Apply f2 baseline correction
 #  :baselineCorrectionf2()


# f1 transform
   :transformf1(f2ZeroFill*f2Sz,f1ZeroFill*f1Sz,
               f1WindowFunction,
               f1FTOrigin,
               f1FTType,f2FTType,
               f1FTInvert,f1PhaseMethod,
               f1P0Phase,f1P1Phase,f1P1PivotPPM)

# Apply f1 baseline correction
  # :baselineCorrectionf1()

# Calculate the frequency domain axes
  (rngX,rngY) = :calcFrequencyAxes(xscale,yscale,guipar)

# Apply extra processing
   :extraProcessing(rngX,rngY,guipar)

   statusBoxCtrl->text("Finished - time taken = $time(),0.3g$s")

# Display the data
   if(wvFreqPlt->dim == "1d") # Check for stacked plot output
      :displayStackedData(xscale,yscale,rngX,rngY,guipar)
   else
      :displayData(xscale,yscale,rngX,rngY,guipar)
   endif

endproc()

procedure(calcFrequencyAxes,xscale,yscale,guipar)

   assignlist(guipar)

   (f2Sz,f1Sz) = size(wv_mIn)

# Display data
   if(f2FTType == "Complex" | f2FTType == "Hypercomplex")
      rngX = [-0.5*f2Sz/xscale[-1],0.5*f2Sz/xscale[-1]]
   elseif(f2FTType == "Real")
      rngX = [-0.25*f2Sz/xscale[-1],0.25*f2Sz/xscale[-1]]
   else
      rngX = xscale
   endif
   if(f2FTType != "Hypercomplex")
      if(f1FTType == "Complex")
         rngY = [-0.5*f1Sz/yscale[-1],0.5*f1Sz/yscale[-1]]
      elseif(f1FTType == "Real")
         rngY = [-0.25*f1Sz/yscale[-1],0.25*f1Sz/yscale[-1]]
      else
         rngY = yscale
      endif
   else
      if(f1FTType == "Complex")
         rngY = [-0.25*f1Sz/yscale[-1],0.25*f1Sz/yscale[-1]]
      elseif(f1FTType == "Real")
         rngY = [-0.125*f1Sz/yscale[-1],0.125*f1Sz/yscale[-1]]
      else
         rngY = yscale
      endif
   endif

endproc(rngX,rngY)

procedure(extraProcessing, rngX,  rngY, guipar)


   assignlist(guipar)

   (w,h) = size(wv_mOut)

   r = w/h*(rngY[1]-rngY[0])/(rngX[1]-rngX[0])

   if(tilt45Ctrl->text == "yes")

      for(y = 0 to h-1)
         row = wv_mOut[~,y]
         wv_mOut[~,y] = rotate(row,round(r*(y-h/2)))
      next(y)

   endif


endproc()

procedure(displayStackedData,xscale,yscale,rngX,rngY,guipar)

   assignlist(guipar)

# Record the current frequency plot labels etc.
   lbl = plotProc:getLabels(wvFreqPlt)
   xLabelFreq = wvFreqPlt->xLabel->text()
   yLabelFreq = wvFreqPlt->yLabel->text()
   titleFreq = wvFreqPlt->title->text()
   xrFreq = wvFreqPlt->axes->xrange()
   yrFreq = wvFreqPlt->axes->yrange()
   (x1,x2,y1,y2) = wvFreqPlt->zoom()
   xDir = wvFreqPlt->axes->xdirection
   yDir = wvFreqPlt->axes->ydirection
   xrFid = wvFidPlt->axes->xrange()
   yrFid = wvFidPlt->axes->yrange()

# Get the B1 frequency from the main interface
   assignlist(getctrlvalues(wv_parent))
   if(isvar("nucleus"))
      (nucleusf2,nucleusf1) = scanstr(nucleus,"%1-%2")
      b1FreqF1 = :getB1Freq(nucleusf1,wv_parent)
      b1FreqF2 = :getB1Freq(nucleusf2,wv_parent)
      if(b1FreqF1 == null)
         message("Error","Unsupported nucleus $nucleusf1$","error")
         return
      endif
      if(b1FreqF2 == null)
         message("Error","Unsupported nucleus $nucleusf2$","error")
         return
      endif
   else
      message("Error","Nucleus not defined","error")
      return
   endif

# Get input data dimensions
   (t2Sz,t1Sz) = size(wv_mIn)
   (f2Sz,f1Sz) = size(wv_mOut)

# Get any offsets
   if(isvar("offFreq$nucleusf2$"))
      off2 = eval("offFreq$nucleusf2$")
   else
      off2 = 0
   endif
   if(isvar("offFreq"))
      off2 = eval("offFreq")
   endif

   fAxisHz = ([0:1:f2Sz-1]-f2Sz/2)/xrFid[-1] # Hz
   fAxis = (fAxisHz+off2)/b1FreqF2 + gData->ppmOffset1H
   wvFreqPlt->axes->type("box_y_independent")
   wvFreqPlt->axes->minaxisvalue(0)
   wvFreqPlt->axes->maxaxisvalue(f1Sz)
   wvFreqPlt->axes->xdirection("reversed")
   wvFreqPlt->axes->xppmscale("true")
   wvFreqPlt->rmlines()
   wvFreqPlt->draw("false")
   wv_mOut = wv_mOut/t2Sz*xrFid[-1]

   for(k = 0 to f1Sz-1)
      row = wv_mOut[~,k]
      n = wvFreqPlt->plot(fAxis,row)
      tc = wvFreqPlt->trace(n)
      tc->yoffset(0.9*k/(f1Sz-1)+0.05)
      r = k*255/(f1Sz-1)
      b = 255-r
      tc->color([r,0,b])
      if(k == 0)
         wvFreqPlt->hold("on")
      endif
   next(k)
   wvFreqPlt->xLabel->text(xLabelFreq)
   wvFreqPlt->yLabel->text(yLabelFreq)
   wvFreqPlt->title->text(titleFreq)
   wvFreqPlt->zoom(x1,x2,y1,y2)
   wvFreqPlt->hold("off")
   wvFreqPlt->draw("true")
 
endproc()


procedure(displayData,xscale,yscale,rngX,rngY,guipar)

   assignlist(guipar)

# Record the current frequency plot labels etc.
   lbl = plotProc:getLabels(wvFreqPlt)
   (nr,mode) = wvFreqPlt->contour()
   xr = wvFreqPlt->axes->xrange()
   yr = wvFreqPlt->axes->yrange()

   xDir = wvFreqPlt->axes->xdirection
   yDir = wvFreqPlt->axes->ydirection
   map = wvFreqPlt->cmap

# Get the B1 frequency from the main interface
   assignlist(getctrlvalues(wv_parent))
   if(isvar("nucleus"))
      (nucleusf2,nucleusf1) = scanstr(nucleus,"%1-%2")
      b1FreqF1 = :getB1Freq(nucleusf1,wv_parent)
      b1FreqF2 = :getB1Freq(nucleusf2,wv_parent)
      if(b1FreqF1 == null)
         message("Error","Unsupported nucleus $nucleusf1$","error")
         return
      endif
      if(b1FreqF2 == null)
         message("Error","Unsupported nucleus $nucleusf2$","error")
         return
      endif
   else
      message("Error","Nucleus not defined","error")
      return
   endif

# Get input data dimensions
   (t2Sz,t1Sz) = size(wv_mIn)

   wvFreqPlt->draw("false")

# Get any offsets
   if(isvar("offFreq$nucleusf1$"))
      off1 = eval("offFreq$nucleusf1$")
   else
      off1 = 0
   endif
   if(isvar("offFreq$nucleusf2$"))
      off2 = eval("offFreq$nucleusf2$")
   else
      off2 = 0
   endif
   if(isvar("offFreq"))
      off1 = eval("offFreq")
      off2 = eval("offFreq")
   endif

# Account for ppm/Hz setting. Note only PPM setting has offsets applied
   f1PPMRange = rngY/b1FreqF1+f1PPMOffset+off1/b1FreqF1
   f2PPMRange = rngX/b1FreqF2+f2PPMOffset+off2/b1FreqF2
   f1HzRange = rngY
   f2HzRange = rngX

   wvFreqPlt->cmap(map)

   if(f1PPMCtrl->text == "yes" & f2PPMCtrl->text == "yes")

      wvFreqPlt->image(wv_mOut,f2PPMRange,f1PPMRange)
      wvFreqPlt->contour(nr,mode)

#      plotProc:setLabels(lbl,wvFreqPlt)   
      wvFreqPlt->title("transformed data")
      if(f2FTType != "None")
         wvFreqPlt->xlabel("Frequency f2 (ppm)")
      endif
      if(f1FTType != "None")
         wvFreqPlt->ylabel("Frequency f1 (ppm)")
      endif
      wvFreqPlt->axes->xdirection(xDir)
      wvFreqPlt->axes->ydirection(yDir) 

      if(xDir == "reversed")
         wvFreqPlt->axes->xrange(xr)
      else
         wvFreqPlt->axes->xrange(xr/b1FreqF2)
      endif

      if(yDir == "reversed")
         wvFreqPlt->axes->yrange(yr)
      else
         wvFreqPlt->axes->yrange(yr/b1FreqF1)
      endif  

   elseif(f1PPMCtrl->text == "no" & f2PPMCtrl->text == "yes")

      wvFreqPlt->image(wv_mOut,f2PPMRange,f1HzRange)
      wvFreqPlt->contour(nr,mode)
      plotProc:setLabels(lbl,wvFreqPlt)   
      wvFreqPlt->title("transformed data")
      if(f2FTType != "None")
         wvFreqPlt->xlabel("Frequency f2 (ppm)")
      endif
      if(f1FTType != "None")
         wvFreqPlt->ylabel("Frequency f1 (Hz)")
      endif
      wvFreqPlt->axes->xdirection("reversed")
      wvFreqPlt->axes->ydirection("forward") 
      if(xDir == "reversed")
         wvFreqPlt->axes->xrange(xr)
      else
         wvFreqPlt->axes->xrange(xr/b1FreqF2)
      endif
      if(yDir == "reversed")
         wvFreqPlt->axes->yrange(yr*b1FreqF1)
      else
         wvFreqPlt->axes->yrange(yr)
      endif 

   elseif(f1PPMCtrl->text == "yes" & f2PPMCtrl->text == "no")

      wvFreqPlt->image(wv_mOut,f2HzRange,f1PPMRange)
      wvFreqPlt->contour(nr,mode)
      plotProc:setLabels(lbl,wvFreqPlt)   
      wvFreqPlt->title("transformed data")
      if(f2FTType != "None")
         wvFreqPlt->xlabel("Frequency f2 (Hz)")
      endif
      if(f1FTType != "None")
         wvFreqPlt->ylabel("Frequency f1 (PPM)")
      endif
      wvFreqPlt->axes->xdirection("forward")
      wvFreqPlt->axes->ydirection("reversed") 
      if(xDir == "reversed")
         wvFreqPlt->axes->xrange(xr*b1FreqF2)
      else
         wvFreqPlt->axes->xrange(xr)
      endif
      if(yDir == "reversed")
         wvFreqPlt->axes->yrange(yr)
      else
         wvFreqPlt->axes->yrange(yr/b1FreqF1)
      endif 

   else

      wvFreqPlt->image(wv_mOut,f2HzRange,f1HzRange)
      wvFreqPlt->contour(nr,mode)
      plotProc:setLabels(lbl,wvFreqPlt) 
      if(f2FTType != "None")
         wvFreqPlt->xlabel("Frequency f2 (Hz)")
      endif
      if(f1FTType != "None")
         wvFreqPlt->ylabel("Frequency f1 (Hz)")
      endif
      wvFreqPlt->axes->xdirection("forward")
      wvFreqPlt->axes->ydirection("forward") 
      if(xDir == "reversed")
         wvFreqPlt->axes->xrange(xr*b1FreqF2)
      else
         wvFreqPlt->axes->xrange(xr)
      endif
      if(yDir == "reversed")
         wvFreqPlt->axes->yrange(yr*b1FreqF1)
      else
         wvFreqPlt->axes->yrange(yr)
      endif  
 
   endif

   wvFreqPlt->draw("true")

# Flag the change
   var = wvFreqPlt->parent->uservar
   var->modified = 1
   wvFreqPlt->parent->uservar(var)

endproc()

procedure(getB1Freq, name, winNr)

   assignlist(getctrlvalues(winNr))

   if(name == "1H")
      b1Freq = single(b1Freq1H)
   elseif(name == "13C")
      b1Freq = single(b1Freq13C)
   elseif(name == "19F")
      b1Freq = single(b1Freq19F)
   elseif(name == "31P")
      b1Freq = single(b1Freq31P)
   else
      b1Freq = null
   endif

endproc(b1Freq)



procedure(deconvolutionf2, tAxis)

   if(f2RefDeconvMethodCtrl->text == "Reference fid")

      assignlist(getctrlvalues(0))

      if(not(isfile(refDeconvFile)))
         message("Error","Deconvolution reference file not defined","error")
         abort("")
      endif
    
   # Load the reference fid
      (refX,refY) = load(refDeconvFile)
   
   # Check its size
      szRef = size(refX)
      szFid = size(tAxis)
   
     (w,h) = size(wv_mIn)  
      if(szRef < w)
         message("Error","The selected reference file should have at least as many points as the current data set","error")
         abort("")
      endif

      refY = :getRef(tAxis*1000, wv_mIn[~,0], refX, refY)

      fidX = tAxis*1000
      gb = f2RefDeconvLinewidth
      lb = f2RefDeconvLinewidth
      fac = pi^2/4/log2(2)*gb^2
      idealFID = exp(-fidX^2*fac/1e6).*exp(-fidX*pi*lb/1e3)
   # Deconvolve each row
      for (y = 0 to h-1)

         fidY = wv_mIn[~,y]
         result = (fidY.*idealFID)/refY
         wv_mIn[~,y] = result

      next(y)

   endif

endproc()


procedure(getRef,fidX, fidY, refX,refY)

  assignlist(getctrlvalues(0))

# Check its size
   szRef = size(refX)
   szFid = size(fidX)

# Truncate reference to match FID
   refX = refX[0:szFid-1]
   refY = refY[0:szFid-1]

# Check that the time axes match
   if(szRef != szRef & refX[1] != fidX[1])
      message("Error","The selected reference file should have the same size and dwell-time as the current data set","error")
      abort("")
   endif

# Find the exact offset of the reference peak
   sz = szFid
   tempSpec = ft(refY)

   (m,idx) = max(mag(tempSpec))

# Shift the peak to the origin and recover the FID
   tempSpec = rotate(tempSpec,sz/2-idx)

   refY = ift(tempSpec)

# Normalise the reference FID
   refY = refY/abs(refY[0])

# Smoothing
   S = 21
   start = refY[0:S-1]
   refY = convolve(refY,matrix(S)+1)
   refY[0:S-1] = start*S
   refY = refY/S

endproc(refY)

###########################################################
# Select the reference file name
###########################################################

procedure(selectReferenceFile)

   if(refDeconvFileCtrl->text = "")
      path = curplot()->filepath
      file = "data.1d"
   else
      defaultFile = refDeconvFileCtrl->text
      path = getbasepath(defaultFile)
      file = getbasedir(defaultFile)
   endif 

   cd(path)
   file = getfilename("load","Select reference FID","1D data","1d",file)
   if(file == "cancel")
      return
   endif
   
   refDeconvFileCtrl->text("$getcwd()$\\$file$")

endproc()

procedure(baselineCorrectionf2)

   if(f2BaseLineCorrectionCtrl->text == "Offset")
      (w,h) = size(wv_rowFt)
      sz = w/64
   
      for(y = 0 to h-1)
         row = wv_rowFt[~,y]
         off = avg(row[0:sz-1] + row[-sz:-1])
         wv_rowFt[~,y] = row - off
      next(y)
   endif  

endproc()

procedure(baselineCorrectionf1)

   if(f1BaseLineCorrectionCtrl->text == "Offset")
      (w,h) = size(wv_mOut)
      sz = w/64
   
      for(x = 0 to w-1)
         col = wv_mOut[x,~]'
         off = avg(col[0:sz-1] + col[-sz:-1])
         wv_mOut[x,~] = (col - off)'
      next(x)  
   endif

endproc()


###########################################################
# row transform routine : transforms wv_mIn to wv_rowFt
# The filter fxWindowFunction is applied in y
# direction during the transform.
# If fxOrigin == Center then the origin is moved to the centre
# fxType == Real or Complex 
###########################################################


procedure(transformf2,w2,h2,fxWindowFunction,
                            fxOrigin,fxType,
                            fxFTInvert,f2PhaseMethod,
                            f2P0,f2P1,f2Pivot)

   (w1,h1) = size(wv_mIn)

   w2m = w2
   h1m = h1
   if(fxType == "Real")
     w2m = w2/2
   endif
   if(fxType == "Hypercomplex")
     h1m = h1/2
   endif

   if(fxOrigin == "Start")
      xWindowFunctionType = "FTFid"
   else
      xWindowFunctionType = "FTEcho"
   endif

   wv_rowFt  = cmatrix(w2m,h1m)

# Row transforms
   Flt = filters:get_filter(fxWindowFunction,xWindowFunctionType,w1)
   if(fxType == "None")
      for (y = 0 to h1-1)
	   wv_rowFt[~,y] = zerofill(Flt.*wv_mIn[~,y],w2,"sides")+i0
      next(y)
   elseif(fxOrigin == "Start" & fxType == "Hypercomplex")
      if(f2PhaseMethod == "Fixed")
         px = exp(i*pi*(f2P1*(([0:w2-1]-f2Pivot)/w2) + f2P0)/180)
         for(y = 0 to h1-2 step 2)
            rowR = ft(zerofill(Flt.*wv_mIn[~,y],w2,"end"))
            rowI = ft(zerofill(Flt.*wv_mIn[~,y+1],w2,"end"))
            wv_rowFt[~,y/2] = (rowR + i*rowI) .* px
         next(y)
      else
         for(y = 0 to h1-2 step 2)
            rowR = real(ft(zerofill(Flt.*wv_mIn[~,y],w2,"end")))
            rowI = real(ft(zerofill(Flt.*wv_mIn[~,y+1],w2,"end")))
            wv_rowFt[~,y/2] = rowR + i*rowI
         next(y)
      endif
   elseif(fxOrigin == "Start" & fxType == "Complex")
      for (y = 0 to h1-1)
         wv_rowFt[~,y] = ft(zerofill(Flt.*wv_mIn[~,y],w2,"end"))
      next(y)
   elseif(fxOrigin == "Center" & fxType == "Complex")
      for (y = 0 to h1-1)
	   wv_rowFt[~,y] = ft(ftshift(zerofill(Flt.*wv_mIn[~,y],w2,"sides")))
      next(y)
   elseif(fxOrigin == "Start" & fxType == "Real")
      for (y = 0 to h1-1)
	   wv_rowFt[~,y] = rft(zerofill(Flt.*wv_mIn[~,y],w2,"end"))
      next(y)
   elseif(fxOrigin == "Center" & fxType == "Real")
      for (y = 0 to h1-1)
	   wv_rowFt[~,y] = rft(ftshift(zerofill(Flt.*wv_mIn[~,y],w2,"sides")))
      next(y)
   endif

# Phase shift THIS IS NOT CORRECT work out the correct phasing.
   if(fxType != "Hypercomplex" & f2PhaseMethod == "Fixed") 
       px = exp(i*pi*(f2P1*(([0:w2m-1]-f2Pivot)/h1m) + f2P0)/180)
      for (y = 0 to h1-1)    
         wv_mIn[~,y] = wv_mIn[~,y] * exp(i*pi*(p1Phase*(([0:w2-1]-p1Pivot)/sz) + p0)/180)
      next(y)
   endif

# Reflect horizontally
   if(fxFTInvert == "yes")
      wv_rowFt = reflect(wv_rowFt,"vert")
   endif

endproc()


###########################################################
# column transform routine : transforms wv_rowFt to wv_mOut
# The filter fyWindowFunction is applied in y
# direction during the transform.
# If fyOrigin == Center then the origin is moved to the centre
# fyType == Real or Complex 
###########################################################

procedure(transformf1,w2,h2,fyWindowFunction,
                            fyOrigin,fyType,fxType,
                            fyFTInvert,f1PhaseMethod,
                            f1P0,f1P1,f1Pivot)


   (w1,h1) = size(wv_mIn)

   if(fyOrigin == "Start")
      yWindowFunctionType = "FTFid"
   else
      yWindowFunctionType = "FTEcho"
   endif

   w2m = w2
   h2m = h2
   h1m = h1

   if(fxType == "Real")
     w2m = w2/2
     h1m = h1
   endif
   if(fxType == "Hypercomplex")
     h2m = h2/2
     h1m = h1/2
   endif
   if(fyType == "Real")
     h2m = h2/2
     h1m = h1
   endif

   wv_mOut = cmatrix(w2m,h2m)

# Column transforms
   Flt = filters:get_filter(fyWindowFunction,yWindowFunctionType,h1m)'

   if(fyType == "None")
      for (x = 0 to w2-1)
	   wv_mOut[x,~] = zerofill((Flt.*wv_rowFt[x,~]),h2m,"sides")+i0
      next(x)
   elseif(fyOrigin == "Start" & fyType == "Complex")
      for (x = 0 to w2-1)
         wv_mOut[x,~] = ft(zerofill(Flt.*wv_rowFt[x,~],h2m,"end"))
      next(x)
   elseif(fyOrigin == "Center" & fyType == "Complex")
      for (x = 0 to w2-1)
	   wv_mOut[x,~] = ft(ftshift(zerofill((Flt.*wv_rowFt[x,~]),h2m,"sides")))
      next(x)
   elseif(fyOrigin == "Start" & fyType == "Real")
      for (x = 0 to w2-1)
	   wv_mOut[x,~] = rft(zerofill((Flt.*wv_rowFt[x,~]),2*h2m,"end"))
      next(x)
   elseif(fyOrigin == "Center" & fyType == "Real")
      for (x = 0 to w2-1)
	   wv_mOut[x,~] = rft(ftshift(zerofill((Flt.*wv_rowFt[x,~]),h2m,"sides")))
      next(x)
   endif

   if(f1PhaseMethod == "Fixed")
      py = exp(i*pi*(f1P1*(([0:h2m-1]-f1Pivot)/h2m) + f1P0)/180)
      for (x = 0 to w2-1)
         wv_mOut[x,~] = wv_mOut[x,~] .* py'
      next(x)
   elseif(f1PhaseMethod == "Magnitude")
      wv_mOut = mag(wv_mOut)
   endif

# Reflect vertically
   if(fyFTInvert == "yes")
      wv_mOut = reflect(wv_mOut,"horiz")
   endif

endproc()



####################################################
# Get the latest filter menu
####################################################

procedure(update_filter_menu)

   filtermenu = filters:get_menu()

   setpar(0,12,"menu",filtermenu)
   setpar(0,13,"menu",filtermenu)
   setpar(0,12,"text",filtermenu[0])
   setpar(0,13,"text",filtermenu[0])

endproc()


####################################################
# Get updates from other macros
####################################################

procedure(processMessage)

  (src,cmd) = getpar(0,0,"text")
   callingwin = getpar(0,0,"source")
   parentwin = guiwinnr()

   if(src == "Macro" & callingwin != parentwin)

      if(cmd == "offset update")
         procPar = :loadSomePar(["f1PPMOffset","f2PPMOffset"])
      endif
    
      setctrlvalues(0,procPar)

   endif

endproc()

####################################################
# Load specific parameters from proc.par
####################################################

procedure(loadSomePar, keys)

   plt =  wvFidPlt
   path = plt->filepath

   if(isdir(path)) # Try using proc.par
      cd(path)
      if(isfile("proc_temp.par"))
         file = "proc_temp.par"
         procPar = load(file)
         procPar = getsublist(procPar,keys)
      elseif(isfile("proc.par"))
         file = "proc.par"
         procPar = load(file)
         procPar = getsublist(procPar,keys)
      endif
   endif

endproc(procPar)

procedure(choosef2PhaseMethod)

   method = f2PhaseMethodCtrl->text
   if(method == "Fixed")
      for(k = 112 to 123)
       #  setpar(0,k,"visible","true")
         setpar(0,k,"enable","true")
      next(k)
   else
      for(k = 112 to 123)
       #  setpar(0,k,"visible","false")
         setpar(0,k,"enable","false")
      next(k)
   endif

endproc()

procedure(choosef1PhaseMethod)

   method = f1PhaseMethodCtrl->text
   if(method == "Fixed")
      for(k = 212 to 223)
       #  setpar(0,k,"visible","true")
         setpar(0,k,"enable","true")
      next(k)
   else
      for(k = 212 to 223)
       #  setpar(0,k,"visible","false")
         setpar(0,k,"enable","false")
      next(k)
   endif

endproc()

 