###########################################################
# Change the colors in current or all plots to 'default mode'
#
# Author: C Eccles
# Copyright Magritek 2022-24
##
###########################################################

procedure(defaultMode)

# Allow editing
   if(EditIfShiftPressed(getmacropath(),getmacroname()))
      return
   endif

# For undo
   func1d("copy plot")
    pp = curplot("1d")->parent
   (w,h) = pp->size()
   for(x = 1 to w)
      for(y = 1 to h)
         pt = pp->subplot(x,y)
         try
            pt->draw("false")
            cd("$appdir$\\Macros\\Kea-Expert\\Processing Macros\\1DPlotAnalyser\\Default Mode")
            plotPreferences() 
            tracePreferences() 
            (realCol,imagCol) = :getColors(pt)
            LoadExpertPlotPreferences:applyPref(pt,realCol,imagCol)
            :changeTextColors(pt)
            pt->draw("true")
         catch
            pt->draw("true")
         endtry
      next(y)
   next(x)


endproc()

# Apply to all visible plots
procedure(allplots)

   bak = getcwd()
   cd("$appdir$\\Macros\\Kea-Expert\\Processing Macros\\1DPlotAnalyser\\Default Mode")
   plt = curplot("1d")
   for(k = 1 to gView->nr1DPlots)
      ptNew = eval("gView->g$k$->subplot(1,1)")
      if(ptNew->parent->visible() == "true")
         curplot(ptNew)
        (realCol,imagCol) = :getColors(ptNew)
         plotPreferences() 
         tracePreferences()
         LoadExpertPlotPreferences:applyPref(ptNew,realCol,imagCol)
         :changeTextColors(ptNew)
      endif
   next(k)
   curplot(plt)
   cd(bak)

endproc()

# Change white text to black 
procedure(changeTextColors, plt)

   textArray  = plt->gettext
   sa = structarray(1)
   if(textArray != null)
      for(k = 0 to size(textArray)-1)
         txtObj = textArray[k]
         col = txtObj->color
         if(col == [255,255,255])
            plt->rmtext(txtObj->text)
            txtObj->color = [0,0,0]
            sa[0] = txtObj
            plt->addtext(sa)
         endif
      next(k)
   endif

endproc()

procedure(getColors, plt)

   if(plt->axes->type == "box_y_independent") # Stacked plot

      trcLst = plt->tracelist
      sz = size(trcLst)
      realCol = matrix(3,sz)
      imagCol = matrix(3,sz)
      for(k = 0 to sz-1)
         r = k*255/(sz-1)
         b = 255-r 
         realCol[~,k] = [r,0,b]
         imagCol[~,k] = [r,0,b]/2
      next(k)

   else # Normal plot

      realCol = [165,47,25;
                 0x0B,0xB4,0xFF;
                 0x50,0xE9,0x91;
                 0xe6,0xD8,0x00;
                 0x9B,0x19,0xF5;
                 0xFF,0xA3,0x00;
                 0xDC,0x0A,0xB4;
                 0xB3,0xD4,0xFF;
                 0x00,0xBF,0xA0]
      
      imagCol = [210,151,140;
                 0x75,0xD6,0xFF;
                 0xA3,0xF3,0xC5;
                 0xFF,0xF7,0x53;
                 0xCA,0x83,0xFA;
                 0xFF,0xCB,0x6A;
                 0x95,0x71,0xDD;
                 0xFF,0xEC,0xFF;
                 0x53,0xFF,0xE6]
   endif

endproc(realCol, imagCol)
