procedure(surf2dParameters)

   n = :windowdefinition()
   sizes = [1,2,3,4,5,6,7,8,9,10]
   setpar(n,16,"name","axes_font_size",
                "menu",sizes)
   setpar(n,18,"name","label_font_size",
                "menu",sizes)
   setpar(n,21,"name","scale_font_size",
                "menu",sizes)
   lst = :load_parameters()
   setctrlvalues(0,lst) 
   :update_range()
   :checkFor3DPlot()
   showwindow(n)

endproc()

# If there is no 3D plot then make one
procedure(checkFor3DPlot)

   pltObj = curplot("3d")
   if(pltObj == null)
      plot3dWin()
   else
      pltObj->parent->show("true")
   endif

endproc()

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("Surface Plot", -1, -1, 442, 221)

      # Define all controls with basic parameters
       checkbox(1, 84, 183, "no,yes", "no")
       statictext(2, 61, 177, "right", "Display")
       textbox(3, 125, 27, 60)
       statictext(4, 118, 31, "right", "Maximum scale value")
       statictext(5, 119, 59, "right", "Minimum scale value")
       textbox(6, 125, 55, 60)
       radiobuttons(7, 26, 87, 20, "vertical", "exact,twod,full", "twod",
            :update_range();)
       statictext(8, 46, 87, "left", "Explicit range")
       statictext(9, 46, 107, "left", "Match 2D plot")
       button(10, 372, 19, 50, 37, "Plot",
          :apply();
          closewindow(0);)
       button(11, 372, 148, 50, 37, "Exit",
          closewindow(0);)
       button(12, 372, 64, 50, 37, "Help",
          help("Macros\core","displaySurface.htm");)
       groupbox(13, "Color-scale mapping", 4, 6, 195, 143)
       statictext(14, 46, 127, "left", "Full data range")
       colorbox(15, 297, 29, 20, 20, [0,255,0],
          :axes_color();)
       textmenu(16, 293, 87, 40, 200)
       statictext(17, 287, 89, "right", "Axes font size")
       textmenu(18, 293, 114, 40, 200)
       statictext(19, 286, 116, "right", "Label font size")
       statictext(20, 167, 191, "right", "font size")
       textmenu(21, 185, 180, 40, 200)
       statictext(22, 173, 177, "right", "Color scale")
       groupbox(23, "Axes properties", 210, 5, 145, 144)
       groupbox(24, "Color-scale properties", 5, 155, 349, 58)
       colorbox(25, 304, 180, 20, 20, [0,255,0],
          :scale_color();)
       statictext(26, 78, 193, "right", "color-scale")
       statictext(27, 287, 33, "right", "Axes color")
       statictext(28, 297, 184, "right", "Scale color")
       statictext(29, 292, 62, "right", "Make square")
       checkbox(30, 300, 63, "no,yes", "no")
       statictext(31, 171, 87, 40, 30, "right", "Smooth shading")
       checkbox(32, 147, 118, "no,yes", "yes")

     # Set other control parameters
       setpar(n,1,"valueID","display_colorscale")
       setpar(n,3,"valueID","cs_max")
       setpar(n,6,"valueID","cs_min")
       setpar(n,7,"valueID","scale_mode")
       setpar(n,10,"mode","default")
       setpar(n,15,"valueID","axes_color")
       setpar(n,16,"valueID","axes_font_size",
                  "menu",["1","2","3","4","5","6","7","8","9","10"])
       setpar(n,18,"valueID","label_font_size",
                  "menu",["1","2","3","4","5","6","7","8","9","10"])
       setpar(n,21,"valueID","scale_font_size",
                  "menu",["1","2","3","4","5","6","7","8","9","10"])
       setpar(n,25,"valueID","scale_color")
       setpar(n,30,"valueID","make_square")
       setpar(n,32,"valueID","smooth_shading")

endproc(n)


procedure(apply)

  :save_parameters()
  :plot_data()

endproc()

procedure(update_range)

   scale_mode = getpar(0,7,"text")

   if(scale_mode == "full" | scale_mode == "twod")
      setpar(0,4,"enable","false")
      setpar(0,5,"enable","false")
      setpar(0,3,"enable","false")
      setpar(0,6,"enable","false")
      m = getplotdata("2d","current")
      if(m != null)
         minv = min(real(m))
         maxv = max(real(m))
         setpar(0,3,"text",maxv)
         setpar(0,6,"text",minv)
      endif
   else
      setpar(0,4,"enable","true")
      setpar(0,5,"enable","true")
      setpar(0,3,"enable","true")
      setpar(0,6,"enable","true")
   endif

endproc()

procedure(save_parameters)

   lst = getctrlvalues(0)
   dir = getcwd()
   cd(prefdir)
   mkdir("Core Macros")
   cd("Core Macros")
   save("surf2d.par",lst)
   cd(dir)

endproc()

procedure(load_parameters)

   display_colorscale = "yes"
   min_value = 0
   max_value = 1
   scale_mode = "twod"
   scale_color = [0,255,0]
   axes_color = [0,255,0]
   axes_font_size = 5
   label_font_size = 6
   scale_font_size = 5
   make_square = "yes"
   lst = mkparlist()
   lst = rmfromlist(lst,"nrArgs")
   dir = getcwd()
   cd(prefdir)
   cd("Core Macros")
   if(isfile("surf2d.par"))
      lst = load("surf2d.par")
   endif
   cd(dir)

endproc(lst)

procedure(axes_color)

  col = getcolor(getpar(0,15,"color"))
  if(col[0] != -1)
     axes_color = col
     setpar(0,15,"color",col)
   endif

endproc()


procedure(scale_color)

  col = getcolor(getpar(0,25,"color"))
  if(col[0] != -1)
     scale_color = col
     setpar(0,25,"color",col)
  endif

endproc()

procedure(plot_data,name)

# Load parameters from file
   lst = :load_parameters()
   assignlist(lst)

# Get data and data parameters
   if(nrArgs == 1)
       scale_mode = "full"
       mats = eval(name)
      (w,h) = size(mats)
       x1 = 0; x2 = w;
       y1 = 0; y2 = h;
   else
      try
         (mats,x,y) = getplotdata("2d","current")
         (w,h) = size(mats)
         x1 = x[0]; x2 = x[1]
         y1 = y[0]; y2 = y[1]
      catch
         message("Error","No 2D data","error")
         return
      endtry
   endif

   xdir = curplot("2d")->axes->xdirection()
   ydir = curplot("2d")->axes->ydirection()

   if(vartype(mats) == "cmatrix2d")
      mats = real(mats)
   endif

   maxv = max(mats)
   minv = min(mats)
   maxd = sqrt(w^2+h^2)

# Get colormap for current data set
   scale = getcolormap()
   (ws,hs) = size(scale)
# cmaptype = 1 means +/- map, 0 means normal
   cmaptype = scale[0,hs-1]

# Get labels from 2D plot
   label_x = xlabel("getargs")
   label_y = ylabel("getargs")

   if(label_x == "")
      label_x = "x"
   endif

  if(label_y == "")
      label_y = "y"
   endif

# Set up the colormaping range
   if(scale_mode == "full")
      cs_max = maxv
      if(cmaptype == 1)
        cs_min = 0
      else
        cs_min = minv
      endif
   elseif(scale_mode == "twod")
      (cs_min,cs_max) = imagerange("getargs")
   endif

   if(make_square == "yes")
      if(w < h)
         w1 = h
         h1 = h
      else
         w1 = w
         h1 = w     
      endif
   else
      w1 = w
      h1 = h    
   endif     

   if(cs_min >= cs_max)
      message("Error","Invalid display range")
      return
    endif 

   if(smooth_shading == "yes")
      func3d("smooth shading on")
   else
      func3d("smooth shading off")
   endif

   axispar3d(maxd/50,maxd/30,
             axes_font_size*maxd/100,
             label_font_size*maxd/80)

   cmap3d(scale,[cs_min,cs_max],scale_color/255,scale_font_size)


   draw3d("false")
      clear3d()
      showcmap3d(display_colorscale)
      clip3dstatus("on")
      scale3d(1,1,0.1*maxd)
      surf2d(mats,scale,[minv,maxv],[cs_min,cs_max],xdir,ydir,make_square)
      clip3dstatus("off")
      viewdistance(2.5*maxd)
      shift3d(-w1/2,-h1/2,0)
      rotate3d(44,0,23)
      depthcuerange(0,maxd)
      color3d(axes_color/255)
      axis3d("x",[0,w1],0,0,[x1,x2],label_x,"centre",xdir)
      axis3d("y",[0,h1],0,0,[y1,y2],label_y,"centre",ydir)
      datarange3d(0,w,0,h,0,1)
   draw3d("true")

endproc()

