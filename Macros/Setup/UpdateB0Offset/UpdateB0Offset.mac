#########################################################
# 
# UpdateB0Offset
#
# This pulse sequence sets the gradient controller to 
# the predefined shim values.
#
# Copyright (c) Magritek Ltd 2025
#
# U.I. V5
#########################################################

#########################################################
# 
# The is the entry point for the SpinsolveExpert 
# interface. It will add the experiment to the parameter
# list or with the control key pressed open the
# relevant macros in the pulse program compiler.
#
# Autogenerated 
#
#########################################################

procedure(UpdateB0Offset, parameters=null)

   macroLocation = getmacropath()
   parentPath = getbasepath(macroLocation)

   if(iskeypressed("shift"))
      PulseProgramCompiler(guiwinnr(),null,parentPath,"UpdateB0Offset")
   elseif(iskeypressed("control"))
      gView->showExperimentHelp("UpdateB0Offset")
   else
      gExpt->addExperiment(parentPath,"UpdateB0Offset",parameters)
   endif

endproc()

#########################################################
# 
# Provide a backdoor interface to this macro. This 
# adds [""] to the user interface list (guipar)
# and also generates the pulse program lists required 
# by execpp. Finally is calls execpp, returning any
# results in the structure 'r'.
#
# Autogenerated 
#
#########################################################

procedure(backdoor, guipar)

   seqInfo = :getseqpar()  
   r = gSeq->initAndRunPP(getmacropath(), getmacroname(), guipar, seqInfo)

endproc(r)

#########################################################
# 
# Returns important pulse sequence parameter lists
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
# Autogenerated 
#
#########################################################

procedure(getseqpar)

   rel = ["w1 = gradstab*1000.0-acqTime*1000.0",
          "n1 = nrPnts",
          "n2 = offsetShim",
          "totPnts = nrPnts",
          "totTime = acqTime"]
   var = [""]
   pp_list = ["n2","w1","n1"]
   pp_name = "UpdateB0Offset.p"
   phase_list = [0;0]

   seqInfo = struct(rel,var,pp_list,pp_name,phase_list)

endproc(seqInfo)


#######################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
#######################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

# Make all gui parameters available
   assignlist(guipar)

# Accumulate scan
   scans = 0

 # Note the time at scan start
   t1 = time()   

 # Set phases for this scan
   (ppList,pAcq) = ucsRun:setPPPhase(ppList,scans,pcList,pcIndex)

 # Send parameters to DSP
   ucsRun:updatePPParameters(ppList,guipar,wvPort)  

 # Run the experiment and collect the data
   (status,data) = ucsRun:getData(totPnts,guipar)

 # See if stop button/escape key pressed
   if(status != "ok")
      return(0)
   endif
 
   pr("\n   B0 shim updated to $offsetShim$\n")

   return(1)

endproc("execpp")

########################################################
# Get the name of a plot file given the region name
# or return the whole list
########################################################

procedure(getPlotInfo,plotRegion)

   info = ["pt1","fid.pt1","pt2","spectrum.pt1"]

   if(plotRegion == "all")
      return(info)
   endif

   idx = getlistindex(info,plotRegion)
   if(idx != -1)
      return(info[idx+1])
   endif

endproc(null)


