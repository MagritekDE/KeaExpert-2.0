##############################################
# Apply an n-dimensional inverse Fourier 
# transform to a variable
##############################################

procedure(InverseFourierTransform)

   n = :windowdefinition()

# Load any current matrix information
   if(isvar("curmatrix"))
    # Update input matrix menu
      matdim = matrixdim(eval(curmatrix))
      menumat = matrixlist(2^(matdim-1))
      setpar(0,2,"index",matdim)
      setpar(0,3,"menu",menumat)
      setpar(0,3,"text",curmatrix)
      :input_matrix_updated()
      :set_ft_type(matdim)
   endif

   showwindow(n)

endproc()

###################################################
# Define the GUI window
###################################################

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("Inverse nD Fourier Transform", -1, -1, 382, 215)

      # Define all controls with basic parameters
       groupbox(1, "Input matrix", 3, 4, 368, 52)
       textmenu(2, 11, 23, 38, 200,
          :dimension_updated();)
       textmenu(3, 55, 23, 114, 200,
          :input_matrix_updated();)
       statictext(4, 173, 27, "left", "Size:")
       textbox(5, 201, 23, 42)
       statictext(6, 248, 26, "left", "x")
       textbox(7, 258, 23, 42)
       statictext(8, 305, 26, "left", "x")
       textbox(9, 315, 23, 42)
       groupbox(10, "Fourier Transformation", 4, 64, 134, 127)
       statictext(11, 15, 84, "left", "Axes")
       statictext(12, 64, 84, "left", "Type")
       statictext(13, 29, 104, "right", "x")
       textmenu(14, 46, 100, 65, 200)
       statictext(15, 29, 132, "right", "y")
       textmenu(16, 46, 127, 65, 200)
       statictext(17, 29, 158, "right", "z")
       textmenu(18, 46, 154, 65, 200)
       groupbox(19, "Output matrix", 146, 64, 136, 127)
       statictext(20, 176, 84, "left", "Name")
       textmenu(21, 158, 100, 113, 200)
       statictext(22, 233, 143, "left", "Display")
       checkbox(23, 242, 161, "no,yes", "yes")
       button(24, 303, 74, 56, 26, "Transform",
          :transform();)
       button(25, 303, 114, 56, 26, "Help",
          :show_help();)
       button(26, 303, 152, 56, 26, "Exit",
          closewindow(0);)
       statusbox(27)

     # Set other control parameters
       setpar(n,2,"tab_number",1,
                   "menu",["1D","2D","3D"])
       setpar(n,3,"tab_number",2,
                   "menu",[""])
       setpar(n,14,"tab_number",3,
                   "menu",["none","FTEcho","FTFid"])
       setpar(n,16,"tab_number",4,
                   "menu",["none","FTEcho","FTFid"])
       setpar(n,18,"tab_number",5,
                   "menu",["none","FTEcho","FTFid"])
       setpar(n,21,"tab_number",6,
                   "menu",[""])
       setpar(n,23,"tab_number",7)
       setpar(n,24,"tab_number",8)
       setpar(n,25,"tab_number",9)
       setpar(n,26,"tab_number",10)

endproc(n)

###################################################
# Display some help
###################################################

procedure(show_help)

   help("Macros\\NMRI","inverseFourierTransform.htm")

endproc()

###################################################
# Window has just been opened to load initial
# 1D data info
###################################################

procedure(initialise_window)

 #  setpar(0,2,"index",1)
   :dimension_updated()

endproc()

###################################################
# Input dimension has been updated so update 
# input and output variable name menus
# default FT types and load default matrix info
###################################################

procedure(dimension_updated)

   ind = getpar(0,2,"index")
   dim = ind+1
   menumat = matrixlist(2^ind)

   :set_ft_type(dim)

   if(size(menumat) > 0)

      setpar(0,3,"menu",menumat)
      setpar(0,3,"index",1)
      setpar(0,21,"menu",menumat)

      matrixName = getpar(0,3,"text")
   
      :input_matrix_updated() 

   endif

endproc()


procedure(set_ft_type,dim)

   if(dim == 1)
      setpar(0,14,"index",3)
      setpar(0,16,"index",1)
      setpar(0,18,"index",1)
   elseif(dim == 2)
      setpar(0,14,"index",2)
      setpar(0,16,"index",2)
      setpar(0,18,"index",1)
   elseif(dim == 3)
      setpar(0,14,"index",2)
      setpar(0,16,"index",2)
      setpar(0,18,"index",2)
   endif

endproc()

###################################################
# Input matrix name has been updated
# so update dimensions and output name
###################################################

procedure(input_matrix_updated)

   matrixName = getpar(0,3,"text")
   if(matrixName != "")
      (xs,ys,zs) = size(alias(matrixName,"eval"))
      setpar(0,5,"text",xs) 
      setpar(0,7,"text",ys) 
      setpar(0,9,"text",zs) 
      setpar(0,21,"text",matrixName+"_ift")   
   endif

endproc()

###################################################
# Inverse transform the input matrix
###################################################

procedure(transform)

   dim = getpar(0,2,"index")+1
   matrixIn = getpar(0,3,"text")
   matrixOut = getpar(0,21,"text")
   display = getpar(0,23,"text")
   1dmode = getpar(0,14,"text")
   2dmode = getpar(0,16,"text")
   3dmode = getpar(0,18,"text")

   time(0)
   setpar(0,27,"text","Processing ...") 
   if(dim == 1)
      ifft:1d(matrixIn,matrixOut,1dmode)
   elseif(dim == 2)
      ifft:2d(matrixIn,matrixOut,1dmode,2dmode)
   elseif(dim == 3)
      ifft:3d(matrixIn,matrixOut,1dmode,2dmode,3dmode)
   endif
   setpar(0,27,"text","Finished - time taken = $time()$s")

   if(display == "yes")
      :display_data(matrixOut)
   endif

endproc()


###################################################
# Display result
###################################################

procedure(display_data, nameOut)

   out = alias(nameOut,"eval")
   dim = matrixdim(out)
   if(dim == 1)
      plot(out)
      title(nameOut)
   elseif(dim == 2)
      image(out)
      title(nameOut)
   elseif(dim == 3)
      image(out[~,~,0])
      title(nameOut)
   endif

endproc()

