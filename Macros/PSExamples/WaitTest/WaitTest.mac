#########################################################
# 
# WaitTest
#  
# Generates two RF pulses with a wait command in between
# Tests the accuracy of the FX3 wait command which
# should allow any length delays greater than 0.4 us
#
# Copyright (c) Magritek Ltd 2025
#
# U.I. V5
#########################################################

#########################################################
# 
# The is the entry point for the SpinsolveExpert 
# interface. It will add the experiment to the parameter
# list or with the control key pressed open the
# relevant macros in the pulse program compiler.
#
# Autogenerated 
#
#########################################################

procedure(WaitTest, parameters=null)

   macroLocation = getmacropath()
   parentPath = getbasepath(macroLocation)

   if(iskeypressed("shift"))
      PulseProgramCompiler(guiwinnr(),null,parentPath,"WaitTest")
   elseif(iskeypressed("control"))
      gView->showExperimentHelp("WaitTest")
   else
      gExpt->addExperiment(parentPath,"WaitTest",parameters)
   endif

endproc()

#########################################################
# 
# Provide a backdoor interface to this macro. This 
# adds [""] to the user interface list (guipar)
# and also generates the pulse program lists required 
# by execpp. Finally is calls execpp, returning any
# results in the structure 'r'.
#
# Autogenerated 
#
#########################################################

procedure(backdoor, guipar)

   seqInfo = :getseqpar()  
   r = gSeq->initAndRunPP(getmacropath(), getmacroname(), guipar, seqInfo)

endproc(r)

#########################################################
# 
# Returns important pulse sequence parameter lists
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
# Autogenerated 
#
#########################################################

procedure(getseqpar)

   rel = ["b1Freq1H     = b1Freq",
          "nDataPnts    = nrPnts",
          "a90Amp       = 90Amplitude1H",
          "d90Dur       = pulseLength1H",
          "w1           = (longDelay*1e6d-pgo-1d)",
          "totPnts      = nrPnts",
          "totTime      = acqTime"]
   var = [""]
   pp_list = ["a90Amp","p1","d90Dur","w1","nDataPnts"]
   pp_name = "WaitTest.p"
   phase_list = [0,1,2,3;0,1,2,3]

   seqInfo = struct(rel,var,pp_list,pp_name,phase_list)

endproc(seqInfo)

#########################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
# March 2021 CDE
#########################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

# Make all gui parameters available
   assignlist(guipar)

# Allocate space for output data
   sumData = cmatrix(totPnts)

# Calculate suitable time and frequency axes
   tAxis = ([0:1:totPnts-1]/totPnts)*totTime*1000 # us
   fAxis = [-totPnts*zf/2:totPnts*zf/2-1]/(totTime*zf)*1000 # Hz

# Time domain filter
   if(filter == "yes")
      flt = filters:get_filter(filterType,"FTFid",tAxis/1e6)
   else
      flt = matrix(totPnts)+1
   endif

# Intialise phase correction
   phCor = 0

# Get plot regions
   (prt,prf) = ucsPlot:getPlotReferences()
   prt->showimag("true")
   prf->showimag("false")

# Work out frequency axis scale, label and range
   (fAxisDisp,fAxisLabel,fRange) = ucsPlot:generate1DFrequencyAxis(prf, fAxis, b1Freq1H, wvPPMOffset1H, 0, guipar)

# Accumulate scans
   for(scan = 0 to nrScans-1)

    # Check timing, update the parameters, run the sequence and return the data
      (data,pAcq,status) = ucsRun:runSequence(guipar,ppList,pcList,pcIndex,scan)

    # See if the abort button has been pressed
      if(status == "abort")
         return(0)
      endif

    # Correct for p1 errors
      if(isvar("shiftPoints"))
   
       # Shift the data to minimise p1
         data = shift(data,round(shiftPoints)) 
   
       # Correct the distortions in start of FID due to digital filter 
         data = ucsUtilities:correctFilter1(data,dwellTime)
   
      endif

    # Accumlate the data
      sumData = ucsRun:accumulate(accumulate,pAcq,sumData,data)

    # Correct the first data point
      datacorr = ucsRun:correctFirstDataPoint(sumData,shiftPoints,fdPhaseCorr)

    # Process data
      (phasedTimeData,spectrum,ph0) = ucsRun:transformData(zerofill(datacorr.*flt,zf*totPnts,"end"),fAxis,guipar,"fid",1,1)

    # Plot the data 
      ucsPlot:graphTimeAndFreq(prt,prf,tAxis,datacorr,fAxisDisp,spectrum,scan,guipar,
                               "Time data (scan : $scan+1$)","Spectral data",
                               "","",
                               fAxisLabel,"Amplitude")

    # Check if complete button pressed
      if(status == "finish")
         scan = scan+1
         exitfor()
      endif

   next(scan)

# Save the data
   ucsFiles:savePlot(prt,:getPlotInfo("pt1"),guipar,"noReport")
   ucsFiles:savePlot(prf,:getPlotInfo("pt2"),guipar,"simpleReport")
   ucsFiles:saveMNovaData(prt,"",guipar,"simpleReport",phase0=ph0)

# Save the processing parameters
   :saveProcPar(guipar,ph0,fRange)

# Pack the data into a structure
   result = struct()
   result->tAxis = tAxis
   result->tData = sumData/scan
   result->fAxis = fAxisDisp
   result->fData = spectrum/scan
   result->par = struct(guipar)
   result->p0 = phCor/pi*180+ph0

# Return result
   return(result)

endproc("execpp") # Don't remove argument


########################################################
# Get the name of a plot file given the region name
# or return the whole list
########################################################

procedure(getPlotInfo,plotRegion)

   info = ["pt1","fid.pt1","pt2","spectrum.pt1"]

   if(plotRegion == "all")
      return(info)
   endif

   idx = getlistindex(info,plotRegion)
   if(idx != -1)
      return(info[idx+1])
   endif

endproc(null)

########################################################
# Return expected experiment duration in seconds
########################################################

procedure(expectedDuration, guipar)

   assignstruct(guipar)
   totScans = nrScans + useStartDelay
   duration = (totScans*repTime)/1000

endproc(duration)

#################################
# Save the processing parameters
#################################

procedure(saveProcPar,guipar,p0,xrange)

   assignlist(guipar)
  
   if(saveData == "false")
      return
   endif

   if(usePPMScale == "yes")
      xrange = xrange*single(b1Freq1H)
   endif

   procpar = ["apodizationFunction = \"$filterType$\"",
              "baseLineCorrectionMethod = \"None\"",
              "displayInPPM = \"$usePPMScale$\"",
              "ftOrigin = \"Start\"",
              "ftType = \"Complex\"",
              "p0Phase = $p0$",
              "p1Phase = 0",
              "p1Pivot = 0",
              "p1FixedPhase = 0",
              "phaseMethod = \"p0, p1 fixed phase\"",
              "zeroFill = $zf$",
              "plotWidth = $xrange[1]-xrange[0]$",
              "plotStart = $xrange[0]$",
              "shiftPoints = 1"]

   if(isvar("exptNr"))
      cd("$dataDirectory$\\$expName$\\$exptNr$")
   else
      cd("$dataDirectory$\\$expName$")
   endif

   if(isfile("proc.par"))
      par = load("proc.par")
      procpar = mergelists(procpar,par)
   endif
   save("proc.par",procpar)

   if(isfile("proc_temp.par"))
      rmfile("proc_temp.par")
   endif

endproc()

