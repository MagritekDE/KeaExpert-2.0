#########################################################
# 
# AmplitudeSweepCh1
#
# A pulse sequence for generating an amplitude response
# of a filter/amplifier between the transceiver channel 1
# output and transceiver input.
#
#
# Copyright (c) Magritek Ltd 2025
#
# U.I. V5
#########################################################

#########################################################
# 
# The is the entry point for the KeaExpert 
# interface. It will add the experiment to the parameter
# list or with the control key pressed open the
# relevant macros in the pulse program compiler.
#
# Autogenerated 
#
#########################################################

procedure(AmplitudeSweepCh1, parameters=null)

   macroLocation = getmacropath()
   parentPath = getbasepath(macroLocation)

   if(iskeypressed("shift"))
      PulseProgramCompiler(guiwinnr(),null,parentPath,"AmplitudeSweepCh1")
   elseif(iskeypressed("control"))
      gView->showExperimentHelp("AmplitudeSweepCh1")
   else
      gExpt->addExperiment(parentPath,"AmplitudeSweepCh1",parameters)
   endif

endproc()

#########################################################
# 
# Provide a backdoor interface to this macro. This 
# adds [""] to the user interface list (guipar)
# and also generates the pulse program lists required 
# by execpp. Finally is calls execpp, returning any
# results in the structure 'r'.
#
# Autogenerated 
#
#########################################################

procedure(backdoor, guipar)

   seqInfo = :getseqpar()  
   r = gSeq->initAndRunPP(getmacropath(), getmacroname(), guipar, seqInfo)

endproc(r)

#########################################################
# 
# Returns important pulse sequence parameter lists
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
# Autogenerated 
#
#########################################################

procedure(getseqpar)

   rel = ["nAmpSteps  = ampSteps",
          "nPnts      = nrPnts",
          "b1FreqCh1    = f1",
          "txMax      = ucsRun:convertTxGain(txMaxdB)",
          "tAmp       = linspace(0,txMax,ampSteps)",
          "totPnts    = nAmpSteps",
          "totTime    = acqTime"]
   var = [""]
   pp_list = ["tAmp","nAmpSteps","l1","p1","nPnts"]
   pp_name = "AmplitudeSweepCh1.p"
   phase_list = [0,1,2,3;0,1,2,3]

   seqInfo = struct(rel,var,pp_list,pp_name,phase_list)

endproc(seqInfo)

#######################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
#######################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

# Make all gui parameters available
   assignlist(guipar)

# Allocate space for output data
   sumData = cmatrix(totPnts)

# Calculate suitable amplitude axes
   aAxis = cal*linspace(0,txMax,ampSteps)/txMax

# Get plot regions
   pt1 = ucsPlot:getPlotReferences()

# Accumulate scans
   for(scan = 0 to nrScans-1)

    # Set phases for this scan
      (ppList,pAcq) = ucsRun:setPPPhase(ppList,scan,pcList,pcIndex)

    # Send all parameter values to Spectrometer
       ucsRun:updatePPParameters(ppList,guipar)

    # Wait for the repetition time to complete
      check = ucsRun:checkTiming(guipar,scan,pcList)
      if(check == "abort")
         return(0)
      endif

    # Run the pulse program and collect the data
      (status,data) = ucsRun:getData(totPnts,guipar)

    # See if stop button/escape key pressed
      if(status != "ok")
         return(0)
      endif

    # Accumlate the data
      sumData = ucsRun:accumulate(accumulate,pAcq,sumData,data)

    # Plot the data 
      ucsPlot:graphTime(pt1,aAxis,mag(sumData)/nrPnts,scan,guipar,"Amplitude response","Amplitude (mV)","Amplitude (mV)")

    # Check if complete button pressed
      if(check == "finish")
         scan = scan+1
         exitfor()
      endif

   next(scan)

# Save the data
   ucsFiles:savePlot(pt1,:getPlotInfo("pt1"),guipar,"noReport")

# Pack the data into a structure
   result = struct()
   result->fx = aAxis
   result->fy = mag(sumData)

# Return result
   return(result)

endproc("execpp") # Don't remove argument

########################################################
# Get the name of a plot file given the region name
# or return the whole list
########################################################

procedure(getPlotInfo,plotRegion)

   info = ["pt1","fid.pt1","pt2","spectrum.pt1"]

   if(plotRegion == "all")
      return(info)
   endif

   idx = getlistindex(info,plotRegion)
   if(idx != -1)
      return(info[idx+1])
   endif

endproc(null)

########################################################
# Return expected experiment duration in seconds
########################################################

procedure(expectedDuration, guipar)

   assignstruct(guipar)

   totScans = nrScans + useStartDelay
   duration = (totScans*repTime)/1000

endproc(duration)
