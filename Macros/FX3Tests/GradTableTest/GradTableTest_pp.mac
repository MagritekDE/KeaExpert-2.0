############################################################
#  
# Tests the spinsolve gradient board
#
# Uses a table to modify the gradient values
#
# pulse - delay - acq
#
############################################################

procedure(pulse_program,dir,mode,pars)

# Expose parameters for FX3 implementation
   if(nrArgs == 3)
      assignlist(pars)
   endif

# Interface description (name, label, ctrl, vartype)
  interface = ["nucleus",         "Nucleus",                   "tb",  "readonly_string";
               "b1Freq1H",        "1H frequency (MHz)",        "tb",  "freq";
               "centerFreqPPM",   "Centre frequency (ppm)",    "tb",  "float";
               "90Amplitude1H",   "Pulse amplitude (dB)",      "tb",  "pulseamp";
               "pulseLength1H",   "Pulse length (us)",         "tb",  "pulselength";
               "repTime",         "Repetition time (ms)",      "tb",  "reptime";
               "rampDiv",         "Shim ramp",                 "dv",   "";
               "rampSteps",       "Nr. steps",                 "tb",  "integer";
               "rampDuration",    "Step time (us)",            "tb",  "integer";
               "rampAmplitude",   "Amplitude (16 bit)",        "tb",  "integer";
               "acquDiv",         "Acquisition",               "dv",   "";
               "shiftPoints",     "Number of points to shift", "tb",  "float,[-100,100]";
               "rxGain",          "Receiver gain",             "tm",  "integer,[-20:3:70]";
               "rxChannel",       "Receiver channel",          "tm",  "string,[\"1H\",\"13C\",\"15N\",\"19F\",\"29Si\",\"31P\",\"X\"]";
               "rxPhase",         "Receiver phase",            "tb",  "float,[-360,360]";
               "nrPnts",          "Number of points",          "tm",  "integer,[4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768]";
               "dwellTime",       "Dwell time (us)",           "tm",  "float,[1,2,5,10,20,50,100,200,500,1000,2000]";
               "nrScans",         "Number of scans",           "tb",  "float,[1,1e8]";
               "flatFilter",      "Flat filter",               "cb",  "no,yes";
               "accumulate",      "Accumulate data",           "cb",  "no,yes";
               "usePhaseCycle",   "Phase cycle",               "cb",  "no,yes";
               "bandwidth",       "Bandwidth (kHz)",           "tb2", "float";
               "acqTime",         "Acquisition time (ms)",     "tb",  "float";
               "procDiv",         "Processing",                "dv",  "";
               "zf",              "Zero fill factor?",         "tm",  "integer,[1,2,4,8,16]";
               "filter",          "Apodisation filter?",       "cb",  "no,yes";
               "filterType",      "Filter type",               "tm", "string,[\"none\",\"exp:1\"]";
               "tdPhaseCorr",     "Time. domain phasing",      "tm", "string,[\"autophase\",\"mag\",\"none\"]";
               "fdPhaseCorr",     "Freq. domain phasing",      "tm", "string,[\"autophase\",\"mag\",\"none\"]";
               "dispDiv",         "Display",                   "dv",  "";
               "usePPMScale",     "Use ppm scale?",            "cb",  "no,yes";
               "dispRangeMinPPM", "Minimum ppm value",         "tb",  "float,[-2000,2000]";
               "dispRangeMaxPPM", "Maximum ppm value",         "tb",  "float,[-2000,2000]";
               "dispRange",       "Display range (Hz)",        "tb",  "float,[0,2e6]";
               "filesDiv",        "Files",                     "dv",  "";
               "saveData",        "Save data?",                "cb",  "false,true"]

# Relationships to determine remaining variable values
   relationships = ["nDataPnts    = nrPnts",
                    "a90Amp       = 90Amplitude1H",
                    "d90Dur       = pulseLength1H",
                    "tGrad        = linspace(0,20000,10)",
                    "nGradSteps   = size(tGrad)",
                    "totPnts      = nrPnts",
                    "totTime      = acqTime"]

# These parameters will be changed between experiments
   variables = [""]

## Pulse sequence

   initpp(dir)              # Define compile directory and clear parameter list

   pulse(1,a90Amp,p1,d90Dur)

   setindex(tGrad,0)
   loop("l1",nGradSteps)
      gradon(tGrad)
      delay(100)
      gradoff()
      delay(100)
      incindex(tGrad,1)
   endloop("l1")

   acquire("overwrite",nDataPnts)   # Acquire FID

   lst = endpp(1)                # Combine commands and return parameter list

# Phase cycle list
   phaseList  = [0,1,2,3;   # p1 : Pulse phase
                 0,1,2,3]   # pA : Acquire phase


endproc(lst,list(0),interface,relationships,variables,null,phaseList)


#####################################################
# Assign those parameters which should take their 
# values from the factory defaults when making a 
# new experiment
#####################################################

procedure(getFactoryBasedParameters, par)

   specPar = gData->getXChannelParameters("1H")
   if(specPar == null)
      return(null)
   endif
   assignlist(specPar)

   modelPar = ucsUtilities:getModelBasedParameters("1H",specPar)

   par = ["rxGain        = $modelPar->rxGain$",
          "pulseLength1H = $PulseLength_1H$",
          "90Amplitude1H = $PowerLevel_1H$",
          "b1Freq1H      = $Frequency_1H$",
          "b1Freq13C     = $Frequency_X$"]

endproc(par)

