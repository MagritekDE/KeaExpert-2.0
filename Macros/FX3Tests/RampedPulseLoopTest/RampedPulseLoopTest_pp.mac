############################################################
#  
# Generates a pulse with a ramped amplitude using a table
#
# pulse - delay - acq
#
############################################################

procedure(pulse_program,dir,mode,pars)

# Expose parameters for FX3 implementation
   if(nrArgs == 3)
      assignlist(pars)
   endif

# Interface description (name, label, ctrl, vartype)
  interface = ["nucleus",         "Nucleus",                      "tb",  "readonly_string";
               "b1Freq",          "Pulse frequency (MHz)",        "tb",  "freq";
               "pulseAmp",        "Pulse amplitude (dB)",         "tb",  "pulseamp";
               "pulseLength",     "Pulse length (us)",            "tb",  "sdelay";
               "repTime",         "Repetition time (ms)",         "tb",  "reptime"]

# Define the tab groups and their order
   groups = ["Pulse_sequence","Acquisition",
             "Processing_Std","Display_Std","File_Settings"]

# Relationships to determine remaining variable values
   relationships = ["b1Freq1H      = b1Freq",
                    "nDataPnts     = nrPnts",
                    "aAmp1         = pulseAmp-6",
                    "aAmp2         = pulseAmp",
                    "dDur          = pulseLength",
                    "f1            = b1Freq",
                    "totPnts       = nrPnts",
                    "totTime       = acqTime"]

# These parameters will be changed between experiments
   variables = [""]

# Pulse sequence
   initpp(dir)                        # Define compile directory and clear parameter list
   rampedrfsetup(1,aAmp2,f1)

   rampedrfstart(1)

   loop("l1",6)
      rampedrfpulse(1,aAmp2,p1,dDur) 
   endloop("l1")

   rampedrfend(1)

   #settxfreq(1,f1) # <- Needed for FX3!

   pulse(1,aAmp1,0,10)

   delay(10)                          # Pulse - acquire delay
   acquire("overwrite",nDataPnts)     # Acquire FID
   parList = endpp(1)                # Combine commands and return parameter list

# Phase cycle list
   phaseList  = [0,1,2,3;   # p1 : Pulse 1 phase
                 0,1,2,3]   # pA : Acquire phase


endproc(parList,groups,interface,relationships,variables,null,phaseList)

