#########################################################
# 
# ShimTest
#  
# A pulse sequence suitable for performing a
# pulse and collect experiment on hydrogen nuclei
# in the Spinsolve Spectrometer.
#
#
# The acquisition delay is optimised to reduce 1st order
# phase errors when the data is shifted forward in time 
# (effectively putting the missed data at time zero where 
# it just introduces a baseline offset.)
#
# pulse - delay - acq
#
# Copyright (c) Magritek Ltd 2025
#
# U.I. V5
#########################################################

#########################################################
# 
# The is the entry point for the SpinsolveExpert 
# interface. It will add the experiment to the parameter
# list or with the control key pressed open the
# relevant macros in the pulse program compiler.
#
# Autogenerated 
#
#########################################################

procedure(ShimTest, parameters=null)

   macroLocation = getmacropath()
   parentPath = getbasepath(macroLocation)

   if(iskeypressed("shift"))
      PulseProgramCompiler(guiwinnr(),null,parentPath,"ShimTest")
   elseif(iskeypressed("control"))
      gView->showExperimentHelp("ShimTest")
   else
      gExpt->addExperiment(parentPath,"ShimTest",parameters)
   endif

endproc()

#########################################################
# 
# Provide a backdoor interface to this macro. This 
# adds [""] to the user interface list (guipar)
# and also generates the pulse program lists required 
# by execpp. Finally is calls execpp, returning any
# results in the structure 'r'.
#
# Autogenerated 
#
#########################################################

procedure(backdoor, guipar)

   seqInfo = :getseqpar()  
   r = gSeq->initAndRunPP(getmacropath(), getmacroname(), guipar, seqInfo)

endproc(r)

#########################################################
# 
# Returns important pulse sequence parameter lists
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
# Autogenerated 
#
#########################################################

procedure(getseqpar)

   rel = ["nDataPnts    = nrPnts",
          "a90Amp       = 90Amplitude1H",
          "d90Dur       = pulseLength1H",
          "freqCh1  = double(b1Freq1H)",
          "freqRx     = double(b1Freq1H)",
          "freqRx     = double(b1Freq1H)",
          "nSteps       = rampSteps",
          "nSteps2      = rampSteps+1",
          "dDur         = rampDuration",
          "nAmpPos      = rampAmplitude",
          "nAmpNeg      = -rampAmplitude",
          "totPnts      = nrPnts",
          "totTime      = acqTime"]
   var = [""]
   pp_list = ["a90Amp","p1","d90Dur","nAmpPos","nAmpNeg","nSteps","dDur","nDataPnts"]
   pp_name = "ShimTest.p"
   phase_list = [0,1,2,3;0,1,2,3]

   seqInfo = struct(rel,var,pp_list,pp_name,phase_list)

endproc(seqInfo)

#########################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
# September 2022 CDE
#########################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

# Make all gui parameters available
   assignlist(guipar)

# Allocate space for output data
   sumData = cmatrix(totPnts)

# Calculate suitable time and frequency axes
   tAxis = ([0:1:totPnts-1]/totPnts)*totTime*1000 # us
   fAxis = [-totPnts*zf/2:totPnts*zf/2-1]/(totTime*zf)*1000 # Hz

# Time domain filter
   if(filter == "yes")
      flt = filters:get_filter(filterType,"FTFid",tAxis/1e6)
   else
      flt = matrix(totPnts)+1
   endif

# Get plot regions
   prt = ucsPlot:getPlotReferences()

# Accumulate scans

   for(scan = 0 to nrScans-1)

    # Set phases for this scan
      (ppList,pAcq) = ucsRun:setPPPhase(ppList,scan,pcList,pcIndex)
    # Send all parameter values to DSP/FX3
       ucsRun:updatePPParameters(ppList,guipar)

    # Wait for repetition time and check for abort
      check = ucsRun:checkTiming(guipar,scan,pcList)
      if(check == "abort")
         return(check)
      endif

    # Run the pulse program and collect the data
    #   ucsUtilities:suspendLock() # turn lock control loop off
      (status,data) = ucsRun:getData(totPnts,guipar)
     #  ucsUtilities:resumeLock()  # turn lock control loop on

    # See if the abort button has been pressed
      if(status == "abort")
         return(0)
      endif

    # Accumlate the data
      sumData = ucsRun:accumulate(accumulate,pAcq,sumData,data)

    # Plot the data 
      ucsPlot:graphTime(prt,tAxis,sumData,scan,guipar,"Time data (scan : $scan+1$)","Spectral data")

    # Check if complete button pressed
      if(check == "finish")
         scan = scan+1
         exitfor()
      endif

   next(scan)

# Save the data
   ucsFiles:savePlot(prt,:getPlotInfo("pt1"),guipar,"noReport")
   ucsFiles:saveMNovaData(prt,"",guipar,"simpleReport")

# Pack the data into a structure
   result = struct()
   result->tAxis = tAxis
   result->tData = sumData/scan
   result->par = struct(guipar)

# Return result
   return(result)

endproc("execpp") # Don't remove argument


########################################################
# Get the name of a plot file given the region name
# or return the whole list
########################################################

procedure(getPlotInfo,plotRegion)

   info = ["pt1","fid.pt1","pt2","spectrum.pt1"]

   if(plotRegion == "all")
      return(info)
   endif

   idx = getlistindex(info,plotRegion)
   if(idx != -1)
      return(info[idx+1])
   endif

endproc(null)

########################################################
# Return expected experiment duration in seconds
########################################################

procedure(expectedDuration, guipar)

   assignstruct(guipar)
   totScans = nrScans + useStartDelay
   duration = (totScans*repTime)/1000

endproc(duration)

#################################
# Save the processing parameters
#################################

procedure(saveProcPar,guipar,p0,xrange)

   assignlist(guipar)
  
   if(saveData == "false")
      return
   endif

   if(usePPMScale == "yes")
      xrange = xrange*single(b1Freq1H)
   endif

   procpar = ["apodizationFunction = \"$filterType$\"",
              "baseLineCorrectionMethod = \"None\"",
              "displayInPPM = \"$usePPMScale$\"",
              "ftOrigin = \"Start\"",
              "ftType = \"Complex\"",
              "p0Phase = $p0$",
              "p1Phase = 0",
              "p1Pivot = 0",
              "p1FixedPhase = 0",
              "phaseMethod = \"p0, p1 fixed phase\"",
              "ppmOffset = $centerFreqPPM$",
              "zeroFill = $zf$",
              "plotWidth = $xrange[1]-xrange[0]$",
              "plotStart = $xrange[0]$",
              "shiftPoints = 1"]

   if(isvar("exptNr"))
      cd("$dataDirectory$\\$expName$\\$exptNr$")
   else
      cd("$dataDirectory$\\$expName$")
   endif

   if(isfile("proc.par"))
      par = load("proc.par")
      procpar = mergelists(procpar,par)
   endif
   save("proc.par",procpar)

   if(isfile("proc_temp.par"))
      rmfile("proc_temp.par")
   endif

endproc()

