############################################################
#  
# Generates a pulse with a ramped amplitude using a table
#
# pulse - delay - acq
#
############################################################

procedure(pulse_program,dir,mode,pars)

# Expose parameters for FX3 implementation
   if(nrArgs == 3)
      assignlist(pars)
   endif

# Interface description (name, label, ctrl, vartype)
  interface = ["nucleus",         "Nucleus",                      "tb",  "readonly_string";
               "b1Freq1H",        "Pulse frequency (MHz)",        "tb",  "freq";
               "centerFreqPPM",   "Centre frequency (ppm)",       "tb",  "float";
               "pulseAmp",        "Pulse amplitude (dB)",         "tb",  "pulseamp";
               "pulseLength",     "Pulse length (us)",            "tb",  "sdelay";
               "nSamp",           "Sample points per loop",       "tb",  "sdelay";
               "dwellTrue",       "True dwell time (us)",         "tb",  "sdelay";
               "repTime",         "Repetition time (ms)",         "tb",  "reptime"]

# Define the tab groups and their order
   groups = ["Pulse_sequence","Acquisition",
             "Processing_Std","Display_Std","File_Settings"]

# Relationships to determine remaining variable values
   relationships = ["nDataPnts     = nrPnts",

                    "aAmp1         = pulseAmp-6",
                    "aAmp2         = pulseAmp",
                    "dDec          = pulseLength",
                    "tPhase        = matrix(nrPnts)",
                    "nTable        = size(tPhase)",
                    "f1            = b1Freq1H",
                    "dAcqDelay     = ucsUtilities:getacqDelay(pulseLength,1,dwellTrue)-7",
                    "nShift        = 2",
                    "dAcq          = dwellTrue-(dDec+pgo+3+2)",
                    "offFreq1H     = (centerFreqPPM-wvPPMOffset1H)*b1Freq1H",
                    "freqCh1       = double(b1Freq1H)+double(offFreq1H/1e6d)",
                    "freqRx        = freqCh1",
                    "totPnts       = nrPnts",
                    "totTime       = dwellTrue*nrPnts/1000"]

# These parameters will be changed between experiments
   variables = [""]

# Pulse sequence
   initpp(dir)                        # Define compile directory and clear parameter list
   rampedrfsetup(2,aAmp2,f1)
   setindex(tPhase,0)
   pulse(1,aAmp1,0,16)
   delay(dAcqDelay)
   rampedrfstart(2)
   loop("l1",nTable)
      acquire("integrateandscale",nSamp, nShift, dAcq)
      rampedrfpulse(2,aAmp2,tPhase,dDec) 
     # delay(1)
      incindex(tPhase,1)
   endloop("l1")
   #acquire("overwrite",nrPnts)

   rampedrfend(2)

   parList = endpp(0)                # Combine commands and return parameter list

# Phase cycle list
   phaseList  = [0,1,2,3;   # p1 : Pulse 1 phase
                 0,1,2,3]   # pA : Acquire phase


endproc(parList,groups,interface,relationships,variables,null,phaseList)

