##################################################################
# Generate the simple parameter interface used by SpinsolveExpert
##################################################################

procedure(generateSimpleInterface,par)

   assignstruct(par)

# Name for new interface file
   dir = "$outputFolder$\\$baseName$"
   itfc = "$baseName$_interface"

   if(isdir(dir) == 0)

      pr("\n   Folder $dir$ not found\n")
      return(0)

   endif

   cd(dir)

   readOnly = 0
   if(isfile(itfc+".mac"))
   
    # Check for readonly status
      proc = "$itfc$:status"
      try
         if(proc() == "readonly")
            readOnly = 1
         endif
      catch
      endtry

   endif

 # Start making file
   printtofile("temp.mac")

   pr("##############################################################\n")
   pr("# This procedure protects the procedures after\n")
   pr("# interfaceDescrition from being overwritten when compiling\n")
   pr("##############################################################\n\n")

   pr("procedure(status)\n\nendproc(\"readonly\")\n\n")
   pr("\n##############################################################\n")
   pr("# This procedure describes the experiment parameter\n")
   pr("# user interface. This is autogenerated from the pulse program\n")
   pr("# interface list. Do not modify manually\n")
   pr("##############################################################\n\n")

   pr("procedure(interfaceDescription)\n\n")
   pr("   interface = [\n")

# The pulse sequence interface
   if(vartype(interface) == "list")
     :processInterfaceList1D(interface, par)
   elseif(vartype(interface) == "list2d")
      :processInterfaceList2D(interface, par)
   endif

# Additional tabs
   nrTabs = size(tabs)
   tabDir = "$appdir$\\Macros\\UCS-PP\\Tabs\\AlternateInterface"
   cd(tabDir)

   for(k = 0 to nrTabs-1)

      if(tabs[k] != "Progress")

         macro = "$tabs[k]$Interface.mac"
         if(isfile(macro) == 0)
            closeprint()
            pr("\n   File $macro$ not found\n")
            return(0)
         endif
         (tabItfc, label) = macro()
         sz = size(tabItfc)
         width = 5

      # Divider and label
      #   pr("      \"$caseset(label[0:3],\"lower\")$Div\",\"$label$\",\"dv\", \"\", \"$tabs[k]$\",\n")
         pr("      \"$caseset(label[0:3],\"lower\")$Div\",\"$label$\",\"dv\", \"$tabs[k]$\", \"\",\n")
         for(q = 0 to sz-1 step width)

           ctrl = tabItfc[q+2]
           range = tabItfc[q+4]
           if(ctrl == "tm" | ctrl == "tmw")
               if(range != "xNuclei" & range != "mNuclei" & range != "allNuclei")
                  try # Allow for variables instead of constants in the interface description
                     isArrayVar = (vartype(eval(range)) == "matrix1d")
                  catch
                     isArrayVar = 0
                  endtry
                  if(isArrayVar == 0)
                     lst = parse(range,",")
                     range = "["  
                     for(w = 0 to size(lst)-2)
                        range = range + "\\\"$lst[w]$\\\","
                     next(w)
                     range = range + "\\\"$lst[size(lst)-1]$\\\"]"
                  endif
               endif
            endif
            pr("      \"$tabItfc[q]$\",")
            pr("\"$tabItfc[q+1]$\",")
            pr("\"$tabItfc[q+2]$\",")
            pr("\"$tabItfc[q+3]$\",")

            if((q == sz-width) & (k == nrTabs-1))
               pr("\"$range$\"]\n\n")
            else
               pr("\"$range$\",\n")
            endif

         next(q)

#            if(k < nrTabs-1)
#               pr("      \"\",\"\",\"dv\", \"\", \"\",\n")
#            endif

      endif

   next(k)

   print("\nendproc(interface)")

   if(readOnly == 0)
      print("\n\nprocedure(plot_run_layout)\n\n")
      print("   layout = [\"pt1\"]\n\n")
      print("endproc(layout)\n\n")

      print("procedure(plot_load_layout)\n\n")
      print("   layout = [\"pt1\"]\n\n")
      print("endproc(layout)\n\n")
   endif

   closeprint()
   cd(dir)

   if(readOnly == 0)
      copyfile("temp.mac","$itfc$.mac")
   else
      escapechar("false")
      tmpTxt = load("temp.mac","text")
      oldTxt = load("$itfc$.mac","text")
      escapechar("true")

      plotTxt = scanstr(oldTxt,"*endproc(interface)%1")

      newTxt = tmpTxt + plotTxt

      save("$itfc$.mac",newTxt)

   endif
      
   rmfile("temp.mac")

endproc(1)

#############################################################################
# Process the pulse sequence interface list (1D)
#############################################################################

procedure(processInterfaceList1D, interface, par)

   width = 6

   assignstruct(par)

   sz = size(interface)
   nrPar = sz/width

   for(k = 0 to sz-1 step width)
       
     ctrl = interface[k+4]
     type = interface[k+5]
     ctrl = ctrl[0:1]
     if(ctrl[0:1] == "tb" | ctrl[0:1] == "tm")
        tokens = parse(type,",")
        szTok = size(tokens)

        if(szTok == 1)

         # Convert types
           if(type == "freq")
               type = "double"
               range = "[1,400]"
           elseif(type == "reptime")
               type = "float"
               range = "[1,1e+008]"
           elseif(type == "xNuclei")
               type = "string"
               range = "xNuclei"
           elseif(type == "mNuclei")
               type = "string"
               range = "mNuclei"
           elseif(type == "allNuclei")
               type = "string"
               range = "allNuclei"
           elseif(type == "pulseamp")
               type = "float"
               range = "[-85,0]"
           elseif(type == "pulselength")
               type = "float"
               range = "[0.5,1000]"
           elseif(type == "sdelay")
               type = "float"
               range = "[2,327670]"
           elseif(type == "ldelay")
               type = "float"
               range = "[2,167e6]"
           elseif(type == "ldelayms")
               type = "float"
               range = "[2e-3,167e3]"
           elseif(type == "float")
               type = "float"
               range = ""
           elseif(type == "double")
               type = "double"
               range = ""
           elseif(type == "integer")
               type = "integer"
               range = "[1,1e8]"
           elseif(type == "string")
               type = "string"
               range = ""
           elseif(type == "readonly_string")
               type = "readonly_string"
               range = ""
           elseif(type == "other")
               type = "float"
               range = ""
           endif
        elseif(szTok == 2)   
            type = tokens[0]
            if(ctrl[0:1] == "tm" & type == "string")  
               options = eval(tokens[1]) 
               range = "["  
               for(w = 0 to size(options)-2)
                  range = range + "\\\"$options[w]$\\\","
               next(w)
               range = range + "\\\"$options[-1]$\\\"]"
            else      
               range = tokens[1]  
            endif 
        else  
            abort("More than 2 tokens!")
        endif

      elseif(ctrl[0:1] == "cb" | ctrl[0:1] == "rb")            
         range = type
         type = "string"

      elseif(ctrl[0:1] == "bt")            
         range = type
         type = "string"

      elseif(ctrl[0:1] == "dv")            
         range = type
         type = "string" 
      endif

      pr("      \"$interface[k]$\",")
      pr("\"$interface[k+1]$\",")
      pr("\"$ctrl$\",")
      pr("\"$type$\",")

      if(size(tabs) == 0 & k == sz-width)
         pr("\"$range$\"]\n")
      else
         pr("\"$range$\",\n")
      endif

   next(k)

endproc()

#############################################################################
# Process the pulse sequence interface list (2D)
#############################################################################

procedure(processInterfaceList2D, interface, par)

   assignstruct(par)

   (cols, nrPar) = size(interface)

   for(y = 0 to nrPar-1)
       
      if(cols[y] != 4)
         message("Error","Line $y+1$ of interface has $cols[y]$ entries - it should have only 4","error")
         abort("Line $y+1$ of interface has $cols[y]$ entries - it should have only 4")
      endif
   
     ctrl = interface[2,y]
     type = interface[3,y]

     if(ctrl[0:1] == "tb" | ctrl[0:1] == "tb2" |ctrl[0:1] == "tm" | ctrl == "textmenu" | ctrl == "textbox")
        tokens = parse(type,",")
        szTok = size(tokens)

        if(szTok == 1)

         # Convert types
           if(type == "freq")
               type = "double"
               range = "[1,400]"
           elseif(type == "reptime")
               type = "float"
               range = "[1,1e+008]"
           elseif(type == "xNuclei")
               type = "string"
               range = "xNuclei"
           elseif(type == "mNuclei")
               type = "string"
               range = "mNuclei"
           elseif(type == "allNuclei")
               type = "string"
               range = "allNuclei"
           elseif(type == "pulseamp")
               type = "float"
               range = "[-85,0]"
           elseif(type == "pulselength")
               type = "float"
               range = "[0.5,1000]"
           elseif(type == "sdelay")
               type = "float"
               range = "[2,327670]"
           elseif(type == "ldelay")
               type = "float"
               range = "[2,167e6]"
           elseif(type == "ldelayms")
               type = "float"
               range = "[2e-3,167e3]"
           elseif(type == "float")
               type = "float"
               range = ""
           elseif(type == "double")
               type = "double"
               range = ""
           elseif(type == "integer")
               type = "integer"
               range = "[1,1e8]"
           elseif(type == "string")
               type = "string"
               range = ""
           elseif(type == "readonly_string")
               type = "readonly_string"
               range = ""
           elseif(type == "other")
               type = "float"
               range = ""
           endif
        elseif(szTok == 2)   
            type = tokens[0]
            if((ctrl[0:1] == "tm" | ctrl == "textmenu") & type == "string")  
               options = eval(tokens[1]) 
               range = "["  
               for(w = 0 to size(options)-2)
                  range = range + "\\\"$options[w]$\\\","
               next(w)
               range = range + "\\\"$options[-1]$\\\"]"
            else      
               range = tokens[1]  
            endif 
        else  
            abort("More than 2 tokens!")
        endif

      elseif(ctrl[0:1] == "cb" | ctrl[0:1] == "rb" | ctrl == "checkbox" | ctrl == "radiobuttons")            
         range = type
         type = "string"

      elseif(ctrl[0:1] == "bt" | ctrl == "button")            
         range = type
         type = "string"

      elseif(ctrl[0:1] == "dv" | ctrl == "divider")            
         range = ""
        # type = type

      endif

      pr("      \"$interface[0,y]$\",")
      pr("\"$interface[1,y]$\",")
      pr("\"$ctrl$\",")
      pr("\"$type$\",")

      if(size(tabs) == 0 & y == nrPar-1)
         pr("\"$range$\"]\n")
      else
         pr("\"$range$\",\n")
      endif

   next(y)

endproc()


