####################################################
#                 shiftrotate1d.mac
#
# Shift or rotate the current 1D plot by a 
# fixed number of data points or 
# Rotate the plot interactively.
#
# Rotate options:
# 1. Select a new origin.
# 2. Select a new centre 
# 3. Drag a point in the plot to a new position 
#
# Author: C Eccles
#
# Copyright (c) Magritek December 2005
#
#####################################################


procedure(shiftRotate1d)

   n = :windowdefinition()
   windowvar(wv_x,wv_y)
   setpar(n,3,"text",1)
   showwindow(n)

endproc()

####################################################
# Define the dialog to extract the parameters
####################################################

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("Shift or Rotate vector", -1, -1, 283, 150)

      # Define all controls with basic parameters
       windowvar(wv_y,wv_x,xlast)
       button(1, 164, 15, 43, 23, "Shift",
          shift = round(getpar(0,3,"value"));
          if(shift != 0);
          :shift_vector(shift);
          endif;)
       button(2, 164, 44, 43, 23, "Rotate",
          rot = round(getpar(0,3,"value"));
          if(rot != 0);
          :rotate_vector(rot);
          endif;)
       textbox(3, 78, 31, 55)
       statictext(4, 66, 26, "right", "shift or ")
       statictext(5, 70, 39, "right", "rotate by:")
       button(6, 24, 104, 44, 27, "Origin",
          :select_origin();)
       button(7, 87, 104, 44, 27, "Centre",
          :select_centre();)
       groupbox(8, "", 5, 1, 211, 75)
       groupbox(9, "Interactive rotation", 5, 81, 210, 64)
       button(10, 150, 104, 44, 27, "Drag",
          xlast = -1;
          trackcursor("1d","arrow",":interactive_rotate","drag");)
       button(11, 224, 105, 45, 27, "Exit",
          closewindow(0);)
       button(12, 224, 17, 45, 27, "Undo",
          :undo();)
       button(13, 224, 61, 45, 27, "Help",
          :show_help();)

     # Set other control parameters
endproc(n)

####################################################
# Display help file
####################################################

procedure(show_help)
   help("Macros\\1D","shiftRotate1d.htm")
endproc()

####################################################
# Shift the plot by an amount delx
####################################################

procedure(shift_vector,delx)

# Get the plot data
   (x,y) = getplotdata("1d")
   if(x == null)
     message("Error","No 1D plot data","error")
     return()
   endif

# Make a backup for undo command
   wv_x = x
   wv_y = y

# Shift and draw the data
   draw1d("false")
      (txt,lx,ly,x1,x2) = 1dpar:get()
      plot(x,shift(y,delx,0))
      1dpar:set(txt,lx,ly,x1,x2)
   draw1d("true")

endproc()

####################################################
# Rotate the plot by an amount delx
####################################################

procedure(rotate_vector,delx)

# Get the plot data
   (x,y) = getplotdata("1d")
   if(x == null)
     message("Error","No 1D plot data","error")
     return()
   endif

# Make a backup for undo command
   wv_x = x
   wv_y = y

# Rotate and draw the data
   draw1d("false")
      (txt,lx,ly,x1,x2) = 1dpar:get()
      plot(x,rotate(y,delx,0))
      1dpar:set(txt,lx,ly,x1,x2)
   draw1d("true")

endproc()

####################################################
# Callback for selecting a new origin
####################################################

procedure(select_origin)

# Get the plot data
   (x,y) = getplotdata("1d")
   if(x == null)
     message("Error","No 1D plot data","error")
     return()
   endif

# Rotate the data
   pos = getx()
   rot = findindex(x,pos)
   :rotate_vector(-rot)

endproc()

####################################################
# Callback for selecting a new centre
####################################################

procedure(select_centre)

# Get the plot data
   (x,y) = getplotdata("1d")
   if(x == null)
     message("Error","No 1D plot data","error")
     return()
   endif

# Rotate the data
   pos = getx()
   w = size(x)
   rot = findindex(x,pos)
   :rotate_vector(w/2-rot)

endproc()

####################################################
# Callback for dragging the plot
####################################################

procedure(interactive_rotate,xc,yc)

# Get the data
   (x,y) = getplotdata("1d")
   if(x == null)
     message("Error","No 1D plot data","error")
     return()
   endif

# Work out index
   xc = findindex(x,xc)

# Make a backup for undo command
   if(xlast == -1)
      xlast = xc
      wv_x = x
      wv_y = y
   endif

# Rotate the data
   delx = xlast - xc
   if(abs(delx) > 1)

      draw1d("false")
        (txt,lx,ly,x1,x2) = 1dpar:get()
         plot(x,rotate(y,-delx,0))
         1dpar:set(txt,lx,ly,x1,x2)
      draw1d("true")
      xlast = xc
    endif

endproc()

####################################################
# Restore the matrix before last rotate/shift
####################################################

procedure(undo)

   (txt,lx,ly) = 1dpar:get()
   draw1d("false")
      plot(wv_x,wv_y)
      1dpar:set(txt,lx,ly)
   draw1d("true")

endproc()
