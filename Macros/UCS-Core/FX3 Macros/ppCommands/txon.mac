###################################################################################
# Switches on the specified rf channel
#
#   txon(channel, amplitude, phaseValue, [frequency])
#
#      channel    : 1/2/"1nb"/"2nb"/"w1"/"w2" (nb = no blanking pulse, w = wobble mode)
#      amplitude  : amplitude in dB or a table (14 bit words)
#      phaseValue : phase offset (16 bits == 0-360 degrees)
#      frequency  : an optional frequency in MHz or as a table (2 x 16 bit words)
#
#      Duration = pgo (note that txon/txoff pulses will be 200 ns 
#                      longer than expected based on intervening delays)
#
#      Note: 1. When stepping through a frequency table you must increment by 2
#               as the frequency array has two, 16 bit values.
#            2. The amplitude or the frequency can be a table but not both.
#
##################################################################################

procedure(txon, channel=1, ampdB=-12, phaseValue=0, frequency=0)

   if(wvFX3Info->mode == "run")
      
      if(channel == "1" | channel == 1)
         gateTTL = 0x04000
         gateAndRFTTL = 0x04008
         ddsAdrs = 0x118E
      elseif(channel == "1nb")
         gateTTL = 0x00000
         gateAndRFTTL = 0x00008
         ddsAdrs = 0x118E
      elseif (channel == "w1")
         gateTTL = 0x05000
         gateAndRFTTL = 0x05008
         ddsAdrs = 0x118E
      elseif (channel == "2" | channel == 2)
         gateTTL = 0x00100
         gateAndRFTTL = 0x00102
         ddsAdrs = 0x128E
      elseif (channel == "2nb")
         gateTTL = 0x00000
         gateAndRFTTL = 0x00002
         ddsAdrs = 0x128E
      elseif (channel == "w2")
         gateTTL = 0x00500
         gateAndRFTTL = 0x00502
         ddsAdrs = 0x128E
      else
          throw("Invalid RF pulse channel $channel$ (should be one of: 1/2/w1/w2/nb1/nb2)")
      endif

     # Work out the type of frequency variable
      if(vartype(frequency) == "float")
         if(frequency > 0)
            freqType = "scalar"
         else
            freqType = "none"
         endif
      elseif(vartype(frequency) == "matrix1d")
         freqType = "array"
      else
         freqType = "none"
      endif

     # Work out the type of amplitude variable
      if(vartype(ampdB) == "float")
         ampType = "scalar"
      elseif(vartype(ampdB) == "matrix1d")
         ampType = "array"
      else
         ampType = "none"
      endif

      # Convert the amplitude from dB to 14 bit number
      if(vartype(ampdB) == "float")
         amplitude = gFX3->convertAmplitude(ampdB)
      else
         amplitude = ampdB
      endif
    
      # Get the pulse gate overhead duration (typically 5 us)
      pgo = wvFX3Info->pref->pgo*100

      # Amplitude provided as a scalar - no frequency so use default
      if(ampType == "scalar" & freqType == "none")

         ps = [15d,      0x00000000,  wvFX3Info->currentTTL | gateTTL,
               15d,      ddsAdrs,     amplitude,
               pgo-30d,  ddsAdrs,     phaseValue,  
               20d,      0x00000000,  wvFX3Info->currentTTL | gateAndRFTTL]

      # Amplitude and frequency provided as scalars
      elseif(ampType == "scalar" & freqType == "scalar") 

         DDSFword = round((frequency * 2^32) / 1000.0)
         txFreq1 = (DDSFword & 0xFFFF0000) / (2^16)  # AD9910 Tx frequency
         txFreq2 = (DDSFword & 0x0000FFFF)

         ps = [15d,      0x00000000,  wvFX3Info->currentTTL | gateTTL,
               15d,      ddsAdrs,     amplitude,
               15d,      ddsAdrs,     phaseValue,  
               15d,      ddsAdrs,     txFreq1,
               pgo-60d,  ddsAdrs,     txFreq2,
               20d,      0x00000000,  wvFX3Info->currentTTL | gateAndRFTTL]

      # Amplitude provided as a scalar but frequency as an array (table)
      elseif(ampType == "scalar" & freqType == "array")

         ps = [15d,      0x00000000, wvFX3Info->currentTTL | gateTTL,
               15d,      0x00006084, frequency[0]-1,
               20d,      0x01006086, 1,
               20d,      0x01006086, 1,
               20d,      0x00006084, 0x01000000,
               20d,      0x01006085, 1,
               20d,      0x01006085, 1,
               20d,      ddsAdrs,    amplitude,
               20d,      ddsAdrs,    round(phaseValue),
               20d,      ddsAdrs,    0x01000000,
               20d,      0x01006086, 1,
               pgo-210d, ddsAdrs,    0x01000000,
               20d,      0x00000000, wvFX3Info->currentTTL | gateAndRFTTL]

      elseif(ampType == "array" & freqType == "none") 

         ps = [15d,      0x00000000, wvFX3Info->currentTTL | gateTTL,
               15d,      0x00006084, amplitude[0]-1,
               20d,      0x01006086, 1,
               20d,      0x01006086, 1,
               20d,      0x00006084, 0x01000000,
               20d,      0x01006085, 1,
               20d,      0x01006085, 1,
               20d,      ddsAdrs,    0x01000000,
               pgo-150d, ddsAdrs,    round(phaseValue),
               20d,      0x00000000, wvFX3Info->currentTTL | gateAndRFTTL]

      elseif(ampType == "array" & freqType == "scalar") 

         DDSFword = round((frequency * 2^32) / 1000.0)
         txFreq1 = (DDSFword & 0xFFFF0000) / (2^16) 
         txFreq2 = (DDSFword & 0x0000FFFF)

         ps = [15d,      0x00000000, wvFX3Info->currentTTL | gateTTL,
               15d,      0x00006084, amplitude[0]-1,
               20d,      0x01006086, 1,
               20d,      0x01006086, 1,
               20d,      0x00006084, 0x01000000,
               20d,      0x01006085, 1,
               20d,      0x01006085, 1,
               20d,      ddsAdrs,    0x01000000,
               20d,      ddsAdrs,    round(phaseValue),
               20d,      ddsAdrs,    txFreq1,
               pgo-190d, ddsAdrs,    txFreq2,
               20d,      0x00000000, wvFX3Info->currentTTL | gateAndRFTTL]

      elseif(ampType == "array" & freqType == "array") 
  
         throw("txon option amp = array and freq = array not supported yet")

      endif

      wvFX3Info->currentTTL = wvFX3Info->currentTTL | gateAndRFTTL

   # Add the pulse code to the rest of the pulse sequence array
      updatePSArray(ps)       
            
   elseif(wvFX3Info->mode == "time")

      pgo = gSeq->psInfo->preferences->pgo
      cnt = gSeq->psInfo->loopCnt
      if(nrArgs == 4) # Single pulse (ch, amp, phase, duration)
         gSeq->psInfo->durationNStk[cnt] = gSeq->psInfo->durationNStk[cnt] + a4 + pgo + 0.3
         gSeq->psInfo->command = gSeq->psInfo->command + ["txon,$a1$,$a2$,$a3$,$a4$,$args[1]$,$args[2]$,$args[3]$"]
   #   elseif(nrArgs == 5) # Single pulse with frequency (ch, amp, phase, duration, freq)
   #      gSeq->psInfo->durationNStk[cnt] = gSeq->psInfo->durationNStk[cnt] + a4 + pgo + 0.3
   #      gSeq->psInfo->command = gSeq->psInfo->command + ["pulse,$a1$,$a2$,$a3$,$a4$,$a5$,$args[1]$,$args[2]$,$args[3]$,$args[4]$"]
   #   elseif(nrArgs == 9) # Dual pulse  (ch1, amp1, phase1, freq1, ch2, amp2, phase2, freq2, duration)
   #      gSeq->psInfo->durationNStk[cnt] = gSeq->psInfo->durationNStk[cnt] + a4 + pgo + 0.6
   #      gSeq->psInfo->command = gSeq->psInfo->command + ["pulse,$a1$, $a2$,$a3$,$a4$,$a5$,$a6$,$a7$,$a8$,$a9$,$args[1]$,$args[2]$,$args[3]$,$args[5]$,$args[6]$,$args[7]$,$args[8]$"]
      endif


   elseif(wvFX3Info->mode == "compile")

      if(frequency == 0)
         addPSParameters(ampdB, phaseValue)
      else
         addPSParameters(ampdB, phaseValue, frequency)
      endif

   endif

endproc()

